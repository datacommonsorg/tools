/**
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Class representation of a single series */
class Series {
  /** A unique identifier made using the facets
  */
  id: string;

  /** An ordered list of x-values for the data */
  x: string[];

  /** An ordered list of y-values for the data */
  y: number[];

  /** The observationAbout of the data */
  observationAbout?: string;

  /** The variable being measured */
  variableMeasured?: string;

  /** The provenance of the data */
  provenance?: string;

  /** The measurement method of the data */
  measurementMethod?: string;

  /** The length of time over which the data point was collected */
  observationPeriod?: string;

  /** The unit for the data */
  unit?: string;

  /** The scaling factor for the data */
  scalingFactor?: number;

  /**
   * Constructor for the series class, creates the object
   * and instantiates all of the properties
   * @param {string[]} x the x values for the series
   * @param {number[]} y the y values for the series
   * @param {string} variableMeasured the variableMeasured of a series
   * @param {string} observationAbout the observationAbout of a series
   * @param {string} provenance the provenance of a series
   * @param {string} measurementMethod the measurementMethod of a series
   * @param {string} observationPeriod the observationPeriod of a series
   * @param {string} unit the unit of a series
   * @param {number} scalingFactor the scalingFactor of a series
   */
  constructor(
      x: string[],
      y: number[],
      variableMeasured?: string,
      observationAbout?: string,
      provenance?: string,
      measurementMethod?: string,
      observationPeriod?: string,
      unit?: string,
      scalingFactor?: number,
  ) {
    this.x = x;
    this.y = y;
    this.variableMeasured = variableMeasured;
    this.observationAbout = observationAbout;
    this.provenance = provenance;
    this.measurementMethod = measurementMethod;
    this.observationPeriod = observationPeriod;
    this.unit = unit;
    this.scalingFactor = scalingFactor ? scalingFactor : 1;

    this.id = Series.toID(
        variableMeasured,
        observationAbout,
        provenance,
        measurementMethod,
        observationPeriod,
        unit,
        scalingFactor,
    );
  }

  /**
   * Generates a unique ID for a series given the values of
   * the properties of a Series object
   * @param {string} variableMeasured the variableMeasured of a series
   * @param {string} observationAbout the observationAbout of a series
   * @param {string} provenance the provenance of a series
   * @param {string} measurementMethod the measurementMethod of a series
   * @param {string} observationPeriod the observationPeriod of a series
   * @param {string} unit the unit of a series
   * @param {number} scalingFactor the scalingFactor of a series
   * @return {string} the id
   */
  static toID(
      variableMeasured?: string,
      observationAbout?: string,
      provenance?: string,
      measurementMethod?: string,
      observationPeriod?: string,
      unit?: string,
      scalingFactor?: number,
  ) {
    const facetList = [
      variableMeasured ? variableMeasured : '',
      observationAbout ? observationAbout : '',
      provenance ? provenance : '',
      measurementMethod ? measurementMethod : '',
      observationPeriod ? observationPeriod : '',
      unit ? unit : '',
      scalingFactor ? scalingFactor.toString() : '1',
    ];

    return facetList.join(',');
  }

  /** Takes in an ID string and returns the corresponding
   * values in an object
   * @param {string} id the id of a Series generated by Series.toID
   * @return {(string | number)[]} the properties of a series parsed from id
   */
  static fromID(id: string) {
    const [
      variableMeasured,
      observationAbout,
      provenance,
      measurementMethod,
      observationPeriod,
      unit,
      scalingFactor,
    ] = id.split(',');

    const parseString = (str: string) => (str === '') ? undefined : str;

    return {
      variableMeasured: parseString(variableMeasured),
      observationAbout: parseString(observationAbout),
      provenance: parseString(provenance),
      measurementMethod: parseString(measurementMethod),
      observationPeriod: parseString(observationPeriod),
      unit: parseString(unit),
      scalingFactor: parseFloat(scalingFactor),
    };
  }

  /** Sorts the datapoints and rewrites this.x and this.y
   * to the sorted version
   */
  sortData() {
    const yValues = this.y;
    const data = this.x.map(function(xValue, index) {
      const x = Date.parse(xValue);
      const y = yValues[index];
      return {xValue, x, y};
    });

    data.sort((a, b) => a.x < b.x ? -1 : a.x > b.x ? 1 : 0);

    this.x = data.map((point) => point.xValue);
    this.y = data.map((point) => point.y);
  }

  /** Returns a copy of the object
   * @return {Series} a deep copy of the instance
   */
  copy() {
    return new Series(
        [...this.x],
        [...this.y],
        this.variableMeasured,
        this.observationAbout,
        this.provenance,
        this.measurementMethod,
        this.observationPeriod,
        this.unit,
        this.scalingFactor,
    );
  }
}

export {Series};
