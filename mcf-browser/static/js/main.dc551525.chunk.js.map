{"version":3,"sources":["back-end/utils.js","back-end/graph.js","back-end/parse-mcf.js","back-end/parse-tmcf.js","back-end/server-api.js","utils.js","TriplesTable.jsx","LoadingSpinner.jsx","DisplayNode.jsx","Header.jsx","ParsingErrorsTable.jsx","FileEntry.jsx","Home.jsx","App.jsx","index.js"],"names":["API_ROOT","ERROR_MESSAGES","getRemotePropertyLabels","dcid","outTargetUrl","fetch","then","res","json","data","properties","outPropertyLabels","inTargetUrl","inPropertyLabels","outLabels","inLabels","getRemotePropertyValues","label","isInverse","targetUrl","values","getValueFromValueObj","valueObj","Error","value","Node","getNode","setDCID","existsInKG","doesExistsInKG","url","shouldReadLine","line","startsWith","length","id","this","localId","alreadyFetched","assertions","invAssertions","nodeHash","remote","mergeNode","absorbedNode","forEach","assert","src","push","invAssert","target","propLabels","valueList","val","isNode","source","Assertion","provenanceId","allLabels","createAssertionsFromLabels","dcidRef","localRef","includes","join","trim","existing","obj","property","provenance","Object","NAMESPACES","ParseMcf","fileName","prov","curNode","lineNum","errors","propValues","split","propValue","namespace","substring","indexOf","replace","parsedValues","nodeRef","ns","nodeId","localNodeHash","propLabel","parsePropValues","setCurNode","setCurNodeDCID","createAssertionsFromParsedValues","mcf","lines","parseLine","localNodes","keys","errMsgs","file","fileReader","FileReader","readAsText","Promise","rej","addEventListener","result","mcfParser","name","parseMcfStr","getColumnId","colIdMatch","match","getEntityID","localIdMatch","ParseTmcf","csvIndex","entityID","csvRow","filledValues","filledValue","colId","getLocalIdFromEntityId","colName","template","filledTemplate","fillPropertyValues","csvRows","mcfLines","row","fillTemplateFromRow","csvFile","csv","fromString","csvToMcf","tmcfFile","readTmcfFile","readCsvFile","fileList","console","log","curTmcf","finalReturn","fileExt","pop","readFile","mcfOut","concat","tmcf","generateMcf","tmcfOut","retrieveNode","shouldCreateRemote","retrieved","getElemClass","setExistsInKG","colorLegend","goToId","homeHash","window","location","hash","goTo","openFile","fileUrl","open","TriplesTable","props","state","tableRows","loading","prevProps","triples","setState","getTripleRows","rows","API","elemClass","title","utils","className","onClick","getRef","fileNames","provNames","tripleRows","index","missingVal","inverse","getTargetCell","getProvenanceCell","rowClassName","key","tableHeaders","Component","LoadingSpinner","msg","DisplayNode","ref","asserts","invAsserts","fetching","setNodeData","node","fetchRemoteData","Header","searchVal","event","keyCode","searchId","onHomeClick","type","list","placeholder","onChange","onKeyUp","handleSearch","subjIds","map","subjId","ParsingErrorsTable","errsList","errObj","FileEntry","mcfTmcfUrl","csvUrl","loadFiles","goToHome","toggle","required","multiple","accept","upload","Array","from","files","handleUrlKeyUp","Home","dropdown","addFileButtonClass","addFileButtonText","clear","toggleDropdown","errs","subjNodes","App","firstLoad","parsingErrs","fileHash","initialState","handleHashChange","parseUrl","params","URLSearchParams","get","fileUrls","getAll","loadRemoteFiles","fileUrlList","appendfileHash","newFiles","axios","request","method","responseType","prevState","submitFileList","onClearPress","uploadFiles","filesList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc551525.chunk.js","sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Module contains helper functions for api calls to data commons as well as\n * helper functions for parsing file to create local knowledge graph.\n */\n\nimport {Node} from './graph.js';\nconst API_ROOT = 'https://api.datacommons.org';\n\nconst ERROR_MESSAGES =\n    {\n      'curNode-length': 'error in declaring node',\n      'curNode-ns': 'invalid namespace in node declaration',\n      'setDCID-noCur': 'current node must be set before setting dcid',\n      'setDCID-multiple': 'a node can only have one dcid',\n      'setDCID-ref': 'dcid property must be a string, not a node reference',\n      'setDCID':\n          'cannot set dcid for current node; check if dcid is already set',\n      'assert-noCur': 'current node must be set before declaring properties',\n      'parse-noColon': 'missing \\':\\', incorrect mcf triple format',\n      'parse-noLabel': 'missing property label',\n    };\n\n/**\n * Gets all property labels of the given dcid that are in the DC KG.\n *\n * @param {string} dcid The dcid of the node to find property labels for.\n * @return {Object} An object containing both 'in' and 'out' property labels.\n */\nasync function getRemotePropertyLabels(dcid) {\n  // Get outward property labels\n  const outTargetUrl = API_ROOT + '/v1/properties/out/' + dcid;\n  const outPropertyLabels = await fetch(outTargetUrl)\n      .then((res) => res.json())\n      .then((data) => data.properties);\n\n  // Get inward property labels\n  const inTargetUrl = API_ROOT + '/v1/properties/in/' + dcid;\n  const inPropertyLabels = await fetch(inTargetUrl)\n      .then((res) => res.json())\n      .then((data) => data.properties);\n\n  return {outLabels: outPropertyLabels, inLabels: inPropertyLabels};\n}\n\n/**\n * Gets all property values containing the given dcid, property label, and\n * direction.\n *\n * @param {string} dcid The dcid of the node to find property value for.\n * @param {string} label The property label to query for.\n * @param {boolean} isInverse Direction of property label, false indicates\n *     an outgoing label, true is an incoming label.\n * @return {Object} An object containing all found values matching the query.\n */\nasync function getRemotePropertyValues(dcid, label, isInverse) {\n  const direction = isInverse ? 'in' : 'out';\n  const targetUrl =\n      (API_ROOT + '/v1/property/' + direction + '/' + label +\n      '/values/' + dcid);\n\n  return fetch(targetUrl)\n      .then((res) => res.json())\n      .then((data) => data.values);\n}\n\n/**\n * Parses an Object returned from the DC REST get_values API to create a Node\n * object from the value's dcid or to return the string value that the object\n * holds.\n *\n * @param {Object} valueObj An object returned from DC REST get_values API.\n * @return {Node | string} The created Node if the value object has a dcid,\n *     otherwise the string of the value.\n */\nfunction getValueFromValueObj(valueObj) {\n  if (!('dcid' in valueObj || 'value' in valueObj)) {\n    throw new Error(\n        'ERROR: DC API returned an object with no \"dcid\" or \"value\" field: ' +\n        valueObj);\n  }\n\n  if ('dcid' in valueObj) {\n    const value = Node.getNode('dcid:' + valueObj.dcid);\n    value.setDCID(valueObj.dcid);\n    value.existsInKG = true;\n    return value;\n  }\n  return valueObj.value;\n}\n\n/**\n * Queries Data Commons to determine if a given dcid is a part of any\n * triples in the Knowledge graph.\n * @param {string} dcid The dcid to check if exists in Data Commons\n * @return {Promise<boolean>} Returns true if given dcid is in any triples in\n *     Data Commons Knowledge Graph.\n */\nasync function doesExistsInKG(dcid) {\n  const url = API_ROOT + '/v1/property/out/typeOf/values/' + dcid;\n\n  // expected response if dcid exists is {\"values\":\"[...]}\n  // expected response if dcid does not exist is {}\n  return fetch(url)\n      .then((res) => res.json())\n      .then((data) => (data.values) ? true : false);\n}\n\n/**\n * Indicates if a line should be parsed.\n * @param {string} line The line to be checked.\n * @return {boolean} False if the line is a comment or empty, otherwise\n *     true.\n */\nfunction shouldReadLine(line) {\n  if (line.startsWith('//') || line.length === 0 || line.startsWith('#')) {\n    return false;\n  }\n  return true;\n}\n\nexport {\n  ERROR_MESSAGES,\n  getRemotePropertyLabels,\n  getRemotePropertyValues,\n  getValueFromValueObj,\n  doesExistsInKG,\n  shouldReadLine,\n};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Module contains Node and Assertion classes which together create a local\n * version of the Data Commons Knowledge Graph.\n */\n\nimport {\n  doesExistsInKG,\n  getRemotePropertyLabels,\n  getRemotePropertyValues,\n  getValueFromValueObj,\n} from './utils.js';\n\n/** Class representation of a single Node in the KG. */\nclass Node {\n  /**\n   * The local id used in a parsed mcf file.\n   * @type {string}\n   */\n  localId;\n\n  /**\n   * Whether triples from the remote Data Commons Knowledge Graph have already\n   * been fetched.\n   * @type {boolean}\n   */\n\n  alreadyFetched;\n\n  /**\n   * Whether the node exists in the Data Commons Knowledge Graph.\n   * @type {boolean}\n   */\n  existsInKG;\n\n  /**\n   * Dcid of the node. Set only if a remote id is referred to in a local file or\n   * pulled from the Data Commons Knowledge Graph.\n   * @type {string}\n   */\n\n  dcid;\n  /**\n   * Array of Assertion objects representing the outgoing triples of the Node\n   * object.\n   * @type {Array<Assertion>}\n   */\n  assertions;\n  /**\n   * Array of Assertion objects representing the incoming triples of the Node\n   * object.\n   * @type {Array<Assertion>}\n   */\n  invAssertions;\n\n  /**\n   * Create a Node based on a given id.\n   * @param {string} id The id of the node to create, including the namespace.\n   */\n  constructor(id) {\n    this.localId = id.startsWith('l:') ? id : null;\n    this.dcid = null;\n\n    this.alreadyFetched = false;\n    this.existsInKG = false;\n\n    this.assertions = [];\n    this.invAssertions = [];\n\n    Node.nodeHash[id] = this;\n  }\n\n  /**\n   * Returns a node with the given ID. All callers of this function expect a\n   * Node object to be returned.If the node does not exist already, then it\n   * should be created. If the created node with the requested id does not exist\n   * in the local file or in the Data Commons Knowledge Graph, then the\n   * front-end will demonstrate this to the user. \n   *\n   * @param {string} id The id of the node to find, including the namespace.\n   * @return {Node} The found node if it exists or is created.\n   */\n  static getNode(id) {\n    const existing = Node.nodeHash[id];\n    return existing ? existing : new Node(id);\n  }\n\n  /**\n   * Indicates if a given object is an instance of Node class.\n   * @param {Object} obj The object to check.\n   * @return {boolean} True if the object is an instance of Node.\n   */\n  static isNode(obj) {\n    return obj instanceof Node;\n  }\n\n  /**\n   * Sets the dcid of Node object. Checks if a separate node based on the dcid\n   * already exists. If remote node exists, then the remote node is absorbed by\n   * current node via mergeNode() method.\n   *\n   * @param {string} dcid The dcid to be added to the Node object, should not\n   *     include the dcid namespace.\n   * @return {boolean} False if the node already has a different dcid, true\n   *     otherwise.\n   */\n  setDCID(dcid) {\n    if (this.dcid && this.dcid !== dcid) {\n      return false;\n    }\n\n    const remote = Node.nodeHash['dcid:' + dcid];\n    if (remote && remote !== this) {\n      this.mergeNode(remote);\n    }\n    this.dcid = dcid;\n    Node.nodeHash['dcid:' + dcid] = this;\n    return true;\n  }\n\n  /**\n   * Moves the assertions and inverse Assertions from the given param node to\n   * the calling Node object by changing the src property for assertions and the\n   * target property of the invAssertions.\n   *\n   * @param {Node} absorbedNode The node object whose triples should be copied.\n   */\n  mergeNode(absorbedNode) {\n    if (this.localId === absorbedNode.localId) {\n      return;\n    }\n\n    absorbedNode.assertions.forEach((assert) => {\n      assert.src = this;\n      this.assertions.push(assert);\n    });\n\n    absorbedNode.invAssertions.forEach((invAssert) => {\n      invAssert.target = this;\n      this.invAssertions.push(invAssert);\n    });\n  }\n\n  /**\n   * Sets the property existsInKG to true if the Node has triples in the DC KG.\n   */\n  async setExistsInKG() {\n    if (!this.dcid || this.existsInKG) {\n      return;\n    }\n    this.existsInKG = await doesExistsInKG(this.dcid);\n  }\n\n  /**\n   * Creates Assertion objects from a list of property labels by calling the\n   * helper function getRemotePropertyValues from utils.js to find the values\n   * in Data Commons given the current node, a property label, and the direction\n   * of the label.\n   *\n   * @param {Array<string>} propLabels List of property labels associated with\n   *     the calling Node object in Data Commons.\n   * @param {boolean} isInverse True if the list of labels are incoming labels,\n   *     meaning the calling Node object is the target of the triple. False if\n   *     the calling Node is the source of the triple.\n   */\n  async createAssertionsFromLabels(propLabels, isInverse) {\n    if (!propLabels || propLabels.length === 0){\n      return;\n    }\n\n    for (const label of propLabels) {\n      await getRemotePropertyValues(this.dcid, label, isInverse)\n          .then((valueList) => {\n            if (!valueList) {\n              throw new Error('No property values for dcid: ' + this.dcid +\n                              ' label: ' + label);\n            }\n\n            valueList.forEach((valueObj) => {\n              const val = getValueFromValueObj(valueObj);\n\n              if (isInverse && !Node.isNode(val)) {\n                throw new Error(\n                    'Error creating assertion with non Node source');\n              }\n\n              const source = isInverse ? val : this;\n              const target = isInverse ? this : val;\n\n              // if val is a node and has already been fetched, then the\n              // assertion would already be stored in both nodes\n              if (!Node.isNode(val) || !val.alreadyFetched) {\n                new Assertion(source, label, target, valueObj.provenanceId);\n              }\n            });\n          });\n    }\n  }\n\n  /**\n   * Stores remote triples as assertions and inverse Assertions of the calling\n   * Node object. Sets the alreadyFetched property to true if data is fetched.\n   */\n  async fetchRemoteData() {\n    if (this.alreadyFetched || !this.dcid) {\n      return;\n    }\n\n    await getRemotePropertyLabels(this.dcid).then(async (allLabels) => {\n      await this.createAssertionsFromLabels(allLabels.outLabels,\n          /* isInverse */ false);\n      await this.createAssertionsFromLabels(allLabels.inLabels,\n          /* isInverse */ true);\n    });\n    this.alreadyFetched = true;\n  }\n\n  /**\n   * Returns the reference to the node that is displayed in browser. If the\n   * node has a dcid, then the dcid will be displayed. If the node's local id\n   * is different, then the local id is also displayed.\n   * Ex: <dcid> [l:<localId>]\n   * @return {string} The reference to the node to be displayed.\n   */\n  getRef() {\n    const dcidRef = this.dcid ? this.dcid : '';\n    let localRef = '';\n\n    if (this.localId && !this.localId.includes('dcid')) {\n      localRef = '[' + this.localId + ']';\n    }\n    return [dcidRef, localRef].join(' ').trim();\n  }\n}\n\nNode.nodeHash = {}; // stores all created nodes\n\n/** Class representation of a single Assertion or triple in the KG. */\nclass Assertion {\n  /**\n   * The source or subject of the triple.\n   * @type {Node}\n   */\n  src;\n  /**\n   * The property label or predicate of the triple.\n   * @type {string}\n   */\n  property;\n  /**\n   * The provenance of the triple.\n   * @type {string}\n   */\n  provenance;\n  /**\n   * The target or object of the triple.\n   * @type {string|Node}\n   */\n  target;\n\n  /**\n   * Create a triple, setting the source's assertion prop to be the new object.\n   *\n   * @param {Node} src The source or subject of the triple.\n   * @param {string} property The property label of the triple.\n   * @param {Node|string} target The predicate or target of the triple.\n   * @param {string} provenance The provenance of the triple.\n   */\n  constructor(src, property, target, provenance) {\n    this.src = src;\n    this.property = property;\n    this.provenance = provenance;\n    this.target = target;\n\n    src.assertions.push(this);\n\n    if (target instanceof Object) {\n      target.invAssertions.push(this);\n    }\n  }\n}\n\nexport {Node, Assertion};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Parses an mcf file and creates local knowledge graph of the parsed data\n * using Node and Assertion Class objects.\n */\n\nimport {Assertion, Node} from './graph.js';\nimport {ERROR_MESSAGES, shouldReadLine} from './utils.js';\n\nconst NAMESPACES = {\n  'l': 'l',\n  'schema': 'dcid',\n  'dcs': 'dcid',\n  'dcid': 'dcid',\n};\n\n/** Class responsible for parsing an mcf file. */\nclass ParseMcf {\n  /**\n   * Provenance to be used for any Assertion objects created during parsing,\n   * based off of the mcf file name.\n   * @type {string}\n   */\n  prov;\n  /**\n   * Current subject Node for any Assertion created. Set when a 'Node:' property\n   * label is parsed.\n   * @type {Node}\n   */\n  curNode;\n  /**\n   * Current line number of the line being parsed, used for identifying location\n   * of syntax error in the mcf file.\n   * @type {number}\n   */\n\n  lineNum;\n\n  /**\n   * List of error messages regarding mcf syntax that are to be displayed to\n   * the user. A single entry of this array should be in the format of:\n   * [line number, line, error message]\n   * @type {Array<Array<String>>}\n   */\n  errors;\n  /**\n   * Create a ParseMcf object which keeps tracks of the current source node of\n   * each triple in the mcf and the provenance, which is the mcf file name.\n   * @param {string} fileName Name of the file to be parsed.\n   */\n  constructor(fileName) {\n    this.prov = fileName;\n    this.curNode = null;\n    this.lineNum = -1;\n    this.errors = [];\n  }\n\n  /**\n   * Parses a string representing a comma separated list of property values\n   * from a line of an mcf file. Returns a list having either a string or\n   * <namespace, reference> pair.\n   *\n   * @param {string} propValues A comma separated list of property values.\n   * @return {Array<(string|Object)>} Array of\n   *     parsed values.\n   */\n  parsePropValues(propValues) {\n    const values = [];\n    // split propValues on commas which are not enclosed by double quotes\n    // split string at each comma followed by even number of double quotes\n    // caveat: does not work if quotes are unbalanced\n    for (const propValue of propValues.split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/)) {\n      const namespace = propValue.split(':')[0].trim();\n      if (namespace in NAMESPACES) {\n        values.push({\n          'ns': namespace,\n          'ref': propValue.substring(propValue.indexOf(':') + 1).trim(),\n        });\n      } else if (propValue.split(':').length > 1 &&\n                 !namespace.startsWith('\"')) {\n        this.errors.push([this.lineNum, this.line, 'unrecognized namespace']);\n        return [];\n      } else {\n        // push property value with surrounding double quotes trimmed\n        values.push(propValue.replace(/^[\" ]*(.*?)[\" ]*$/g, '$1'));\n      }\n    }\n    return values;\n  }\n\n  /**\n   * Sets curNode variable of the calling ParseMcf object based on the passed in\n   * parsed values of a line of mcf, given the property label for the line was\n   * 'Node'. The parsed value either is a local reference with or without the\n   * 'l' namespace, or it has a remote namespace. If the namespace is remote,\n   * then the dcid for curNode is set. Updates localNodeHash mapping to store\n   * the subject nodes to be displayed in home screen of browser.\n   *\n   * @param {Array<string|Object>} parsedValues The array of parsed values from\n   *     a line of mcf with property label of 'Node'.\n   */\n  setCurNode(parsedValues) {\n    if (parsedValues.length !== 1) {\n      this.errors.push(\n          [this.lineNum, this.line, ERROR_MESSAGES['curNode-length']]);\n      return;\n    }\n\n    let nodeRef;\n    let ns;\n\n    if (parsedValues[0] instanceof Object) {\n      // handle case: Node: dcid:remoteRef, which means that\n      // parsedValues[0] === {'ns':'dcid', 'ref':'remoteRef' }\n      ns = parsedValues[0]['ns'];\n      if (ns === 'dcid') {\n        ns = ns + ':';\n        nodeRef = parsedValues[0]['ref'];\n      } else {\n        this.errors.push(\n            [this.lineNum, this.line, ERROR_MESSAGES['curNode-ns']]);\n        return;\n      }\n    } else {\n      // handle case: Node: localRef, which means parsedValues[0]==='localRef'\n      nodeRef = parsedValues[0];\n      ns = '';\n    }\n    // combine the namespace and reference into single id\n    const nodeId = 'l:' + ns + nodeRef;\n    this.curNode = Node.getNode(nodeId);\n\n    if (ns === 'dcid:') {\n      if (!this.curNode.setDCID(nodeRef)) {\n        this.errors.push([this.lineNum, this.line, ERROR_MESSAGES['setDCID']]);\n        return;\n      }\n      ParseMcf.localNodeHash[ns + nodeRef] = this.curNode;\n    } else {\n      ParseMcf.localNodeHash[nodeId] = this.curNode;\n    }\n  }\n\n  /**\n   * Sets the dcid of the curNode variable of the calling ParseMcf object given\n   * the property label of the line being parsed is 'dcid'.\n   * @param {Array<string|Object>} parsedValues The array of parsed values from\n   *     a line of mcf with property label of 'dcid'.\n   */\n  setCurNodeDCID(parsedValues) {\n    if (!this.curNode) {\n      this.errors.push(\n          [this.lineNum, this.line, ERROR_MESSAGES['setDCID-noCur']]);\n      return;\n    }\n    if (parsedValues.length !== 1) {\n      this.errors.push(\n          [this.lineNum, this.line, ERROR_MESSAGES['setDCID-multiple']]);\n      return;\n    }\n    if (typeof parsedValues[0] !== 'string') {\n      this.errors.push(\n          [this.lineNum, this.line, ERROR_MESSAGES['setDCID-ref']]);\n      return;\n    }\n\n    if (!this.curNode.setDCID(parsedValues[0])) {\n      this.errors.push([this.lineNum, this.line, ERROR_MESSAGES['setDCID']]);\n    }\n  }\n\n  /**\n   * Create Assertion objects using curNode variable of calling ParseMcf object\n   * as the source of the triple and the prov variable of the ParseMcf object\n   * as the provenance of the triple.One Assertion object is created for each\n   * parsed value given in the array parsedValues.\n   *\n   * @param {string} propLabel The property label of the triple to be created.\n   * @param {Array<string|Object>} parsedValues The parsed values from a line of\n   *     mcf, used to create the target for each created triple.\n   */\n  createAssertionsFromParsedValues(propLabel, parsedValues) {\n    if (!this.curNode) {\n      this.errors.push(\n          [this.lineNum, this.line, ERROR_MESSAGES['assert-noCur']]);\n      return;\n    }\n    for (const val of parsedValues) {\n      let target = val;\n      if (val instanceof Object) {\n        target = Node.getNode(NAMESPACES[val['ns']] + ':' + val['ref']);\n        if (NAMESPACES[val['ns']] === 'dcid') {\n          if (!target.setDCID(val['ref'])) {\n            this.errors.push(\n                [this.lineNum, this.line, ERROR_MESSAGES['setDCID']]);\n          }\n        }\n      }\n      new Assertion(this.curNode, propLabel, target, this.prov);\n    }\n  }\n\n  /**\n   * Parses a single line of an mcf file. First determines if the line should be\n   * read, then finds the property label, then the property values and creates\n   * an Assertion object based on the triple, given the calling object has a\n   * curNode property that acts as the source  and a prov property that gives\n   * the provenance for the triple.\n   *\n   * @param {string} line The line of mcf to be parsed.\n   */\n  parseLine(line) {\n    line = line.trim();\n\n    if (!shouldReadLine(line)) {\n      return; // not an error\n    }\n\n    if (!line.includes(':')) {\n      this.errors.push(\n          [this.lineNum, this.line, ERROR_MESSAGES['parse-noColon']]);\n      return;\n    }\n\n    const propLabel = line.split(':', 1)[0].trim();\n    const propValues = line.substring(line.indexOf(':') + 1).trim();\n\n    if (!propLabel) {\n      this.errors.push(\n          [this.lineNum, this.line, ERROR_MESSAGES['parse-noLabel']]);\n      return;\n    }\n    if (!propValues) {\n      // if there is a missing property value, do not return error\n      return;\n    }\n\n    const parsedValues = this.parsePropValues(propValues);\n\n    switch (propLabel) {\n      case 'Node':\n        this.setCurNode(parsedValues);\n        break;\n\n      case 'dcid':\n        this.setCurNodeDCID(parsedValues);\n        break;\n\n      default:\n        this.createAssertionsFromParsedValues(propLabel, parsedValues);\n    }\n  }\n\n  /**\n   * Parses each line of the given string of an mcf file after setting the prov\n   * property of the calling ParseMcf object.\n   * @param {string} mcf The string representation of an mcf file to parse.\n   * @return {Object} A list of the local node ids and the list of error\n   * messages which should be empty if no mcf syntax errors were found.\n   */\n  parseMcfStr(mcf) {\n    const lines = mcf.split('\\n');\n    this.lineNum = 1;\n\n    lines.forEach((line) => {\n      this.line = line;\n      this.parseLine(line);\n      this.lineNum++;\n    });\n\n    return {\n      localNodes: Object.keys(ParseMcf.localNodeHash),\n      errMsgs: this.errors,\n    };\n  }\n\n  /**\n   * Reads an mcf file into a string, then creates ParseMcf object to parse the\n   * string.\n   * @param {FileObject} file An mcf file from the html file-input element.\n   * @return {Promise} Promise returns the result of parseMcfStr.\n   */\n  static readFile(file) {\n    const fileReader = new FileReader();\n    fileReader.readAsText(file);\n\n    return new Promise((res, rej) => {\n      fileReader.addEventListener('loadend', (result) => {\n        const mcfParser = new ParseMcf(file.name);\n        res(mcfParser.parseMcfStr(fileReader.result));\n      });\n      fileReader.addEventListener('error', rej);\n    });\n  }\n}\n\nParseMcf.localNodeHash = {}; // stores mapping of mcf subject IDs to the Node\n\nexport {ParseMcf};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as csv from 'csvtojson';\nimport {shouldReadLine} from './utils.js';\n\n/**\n * Returns the string following '->' in  a given string. Used for getting csv\n * column name when filling in tmcf with values from csv.\n * Ex:   C:SomeDataset->GeoId would return 'GeoId'\n * @param {string} propValue The string to look for a column name in.\n * @return {string|null} The column name that comes after '->'.\n */\nfunction getColumnId(propValue) {\n  const colIdMatch = propValue.match('C:(.*)->(.*)');\n  if (colIdMatch) {\n    return colIdMatch[0];\n  }\n  return null;\n}\n\n/**\n * Returns a string matching the format E:'DataSet Name'->'Entity #'.\n * @param {string} line The string to look for a match in.\n * @return {string|null} The entity id that matches the specified format.\n */\nfunction getEntityID(line) {\n  const localIdMatch = line.match('E:(.*)->(.*)');\n  if (localIdMatch) {\n    return localIdMatch[0];\n  }\n  return null;\n}\n\n/**\n * Class responsible for converting one TMCF file and one CSV file into an MCF\n * string.\n */\nclass ParseTmcf {\n  /**\n   * Current row number of the csv file that is being parsed.\n   * @type {number}\n   */\n  csvIndex;\n\n  /**\n  * Create a ParseTmcf object which keeps tracks of the current csv row\n  * number being parsed.\n  */\n  constructor() {\n    this.csvIndex = -1;\n  }\n\n  /**\n   * Generates a local id for a node of specfic row in csv from an entity id\n   * used in tmcf file. Ex: E:SomeDataset->E1 => SomeDataset_E1_R<index>\n   * @param {string} entityID The entity id used in tmcf file.\n   * @return {string|null} The local id for the node of the specific csv row.\n   */\n  getLocalIdFromEntityId(entityID) {\n    if (entityID) {\n      return entityID.replace('->', '_').replace('E:', '') + '_R' +\n             this.csvIndex;\n    }\n    return null;\n  }\n\n  /**\n   * Converts propertyValues from a line of tmcf to mcf by either converting\n   * entity ids to local ids or replacing a csv column reference with the actual\n   * value from the csv.\n   *\n   * @param {string} propValues The property values from the line of TMCF.\n   * @param {Object} csvRow The JSON representation of a single row of a csv\n   *     file. The keys are the column names and values are the corresponding\n   *     entries of the csv for the specfic row/column.\n   * @return {string} The mcf version of the given propValues which has local\n   *     ids in lieu of entity ids and csv column references replaces with csv\n   *     values.\n   */\n  fillPropertyValues(propValues, csvRow) {\n    const filledValues = [];\n\n    for (const propValue of propValues.split(',')) {\n      let filledValue;\n\n      const entityID = getEntityID(propValue);\n      const colId = getColumnId(propValue);\n\n      if (entityID) {\n        // convert entity id format to local id format\n        // Ex: E:SomeDataset->E1 => l:SomeDataset_E1_R<index>\n        const localId = 'l:' + this.getLocalIdFromEntityId(entityID);\n        filledValue = propValue.replace(entityID, localId);\n      } else if (colId) {\n        // Replace csv column placeholder with the value\n        const colName = colId.split('->')[1];\n        filledValue = propValue.replace(colId, csvRow[colName]);\n      } else {\n        filledValue = propValue;\n      }\n      filledValues.push(filledValue);\n    }\n    return filledValues.join(',');\n  }\n\n  /**\n   * Convert a single row from the csv file to multiple lines of mcf by filling\n   * in the appropriate values in the tmcf template.\n   * @param {string} template The string representation of tmcf file.\n   * @param {Object} csvRow The JSON representation of a single row of a csv\n   *     file. The keys are the column names and values are the corresponding\n   *     entries of the csv for the specfic row/column.\n   * @return {string} The constructed mcf for the single row from csv file.\n   */\n  fillTemplateFromRow(template, csvRow) {\n    const filledTemplate = [];\n\n    for (const line of template.split('\\n')) {\n      if (!line.trim() || !shouldReadLine(line)) {\n        filledTemplate.push('');\n        continue;\n      }\n\n      const propLabel = line.split(':')[0].trim();\n      const propValues = line.substring(line.indexOf(':') + 1).trim();\n\n      if (propLabel === 'Node') {\n        if (propValues.includes(',')) {\n          throw new Error('cannot have multiple ids for Node declaration');\n        }\n        const entityID = getEntityID(propValues);\n        if (entityID) {\n          filledTemplate.push(propLabel + ': ' +\n                              this.getLocalIdFromEntityId(entityID));\n        } else {\n          filledTemplate.push(propLabel + ': ' + propValues);\n        }\n      } else {\n        const filledValues = this.fillPropertyValues(propValues, csvRow);\n        filledTemplate.push(propLabel + ': ' + filledValues);\n      }\n    }\n    return filledTemplate.join('\\n');\n  }\n\n  /**\n   * Creates an mcf string from a string representation of TMCF file and the\n   * json representation of a CSV file. The whole template from the tmcf is\n   * populated with values for each row of the csv.\n   * @param {string} template The string representation of a tmcf file.\n   * @param {Array<Object>} csvRows The json representation of the csv file.\n   *     Each Object element of the array represents one row of the csv.\n   * @return {string} The generated mcf as a string.\n   */\n  csvToMcf(template, csvRows) {\n    this.csvIndex = 1;\n    const mcfLines = [];\n    for (const row of csvRows) {\n      mcfLines.push(this.fillTemplateFromRow(template, row));\n      this.csvIndex += 1;\n    }\n    return mcfLines.join('\\n');\n  }\n\n  /**\n   * Converts CSV file to an array of JS Object where each JS Object in the\n   * array represents one row of the csv. The keys of the object are the column\n   * header names and the values of the object are the csv entries in that\n   * column of the given row the object represents.\n   * @param {string} template The string representation of a tmcf file.\n   * @param {FileObject} csvFile THe csv file from html file-input element.\n   * @return {Array<Object>} The json representation of the csv file.\n   */\n  async readCsvFile(template, csvFile) {\n    const fileReader = new FileReader();\n    fileReader.readAsText(csvFile);\n    return new Promise((res, rej) => {\n      fileReader.addEventListener('loadend', (result) => {\n        csv()\n            .fromString(fileReader.result)\n            .then((csvRows) => {\n              res(this.csvToMcf(template, csvRows));\n            });\n      });\n      fileReader.addEventListener('error', rej);\n    });\n  }\n\n  /**\n   * Reads a tmcf file and returns the contents as a string\n   * @param {FileObject} tmcfFile The tmcf file from html file-input element.\n   * @return {string} The string representation of the tmcf file.\n   */\n  static async readTmcfFile(tmcfFile) {\n    const fileReader = new FileReader();\n    fileReader.readAsText(tmcfFile);\n    return new Promise((res, rej) => {\n      fileReader.addEventListener('loadend',\n          (result) => {\n            res(fileReader.result);\n          });\n      fileReader.addEventListener('error', rej);\n    });\n  }\n\n  /**\n   * Converts a TMCF file and CSV file to an MCF string.\n   * @param {FileObject} tmcfFile The tmcf file from html file-input element.\n   * @param {FileObject} csvFile THe csv file from html file-input element.\n   * @return {string} The translated mcf as a string.\n   */\n  static async generateMcf(tmcfFile, csvFile) {\n    return ParseTmcf.readTmcfFile(tmcfFile).then((template) => {\n      const tmcfParser = new ParseTmcf();\n      return tmcfParser.readCsvFile(template, csvFile);\n    });\n  }\n}\n\nexport {ParseTmcf};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* Functions to relay information from the back-end to the front-end. */\n\nimport {Node} from './graph.js';\nimport {ParseMcf} from './parse-mcf.js';\nimport {ParseTmcf} from './parse-tmcf.js';\n\n/**\n * Parses App state's files list.\n * @param {Array<Blob>} fileList The list of blobs to be parsed.\n * @return {Object} An object containing the ids of the subject nodes and any\n *     parsing error message objects.\n */\nasync function readFileList(fileList) {\n  console.log(fileList);\n  let curTmcf = null;\n  const finalReturn = {'errMsgs': [], 'localNodes': []};\n\n  for (const file of fileList) {\n    const fileExt = file.name.split('.').pop();\n\n    if (fileExt === 'mcf') {\n      const mcfOut = await ParseMcf.readFile(file);\n      console.log(mcfOut);\n      finalReturn['errMsgs'] = finalReturn['errMsgs'].concat({\n        'file':file.name,\n        'errs': mcfOut['errMsgs'],\n      });\n      finalReturn['localNodes'] =\n        finalReturn['localNodes'].concat(mcfOut['localNodes']);\n    } else if (fileExt === 'tmcf') {\n      curTmcf = file;\n    } else {\n      if (curTmcf) {\n        const tmcf = curTmcf;\n        const tmcfOut =\n          await ParseTmcf.generateMcf(curTmcf, file).then((mcf) => {\n            console.log(mcf);\n            const mcfParser = new ParseMcf(tmcf.name + '&' + file.name);\n            return mcfParser.parseMcfStr(mcf);\n          });\n\n        if (tmcfOut['errMsgs'].length !== 0) {\n          finalReturn['errMsgs'] =\n            finalReturn['errMsgs'].concat({\n              'file':tmcf.name,\n              'errs': tmcfOut['errMsgs'],\n            });\n        }\n        finalReturn['localNodes'] =\n          finalReturn['localNodes'].concat(tmcfOut['localNodes']);\n      }\n      curTmcf = null;\n    }\n  }\n  return finalReturn;\n}\n\n/**\n  * Clears the backend data. Called when a user presses the 'Clear Files'\n  * button.\n  */\nfunction clearFiles() {\n  Node.nodeHash = {};\n  ParseMcf.localNodeHash = {};\n}\n\n/**\n  * Retreives a node specified by the id. If shouldCreateRemote is true, then\n  * the dcid of the retreieved node will attempt to be set. The\n  * shouldCreateRemote param is true when the user uses the search bar in the UI\n  * so that a node is always found. The node properties will display as blank\n  * and the node id will be colored red if the node does not exist in the KG.\n  *\n  * @param {String} id The id (including namespace) of the node to be retreived.\n  * @param {boolean} shouldCreateRemote Indicates is the dcid of the retreieved\n  *     node should be set to id.\n  * @return {Node} The retreived node with the given id.\n  */\nfunction retrieveNode(id, shouldCreateRemote) {\n  const retrieved = Node.getNode(id);\n  if (shouldCreateRemote) {\n    retrieved.setDCID(id.replace('dcid:', ''));\n  }\n  return retrieved;\n}\n\n/**\n  * Determines if passed in object is a Node object by calling the static Node\n  * class function.\n  *\n  * @param {Object} obj The object to determine if it is of Node type.\n  * @return {boolean} True if obj is of Node type and false otherwise.\n  */\nfunction isNodeObj(obj) {\n  return Node.isNode(obj);\n}\n\n/**\n  * Returns the class that a node should be contained in based on how it is\n  * resolved locally and remotely.\n  *\n  * @param {Node} target The node object whose element color needs to be found.\n  * @return {String} The appropriate css class for the node.\n  */\nasync function getElemClass(target) {\n  if (!target) {\n    return null;\n  }\n  if (target.existsInKG) {\n    return 'exist-in-kg';\n  }\n\n  return target.setExistsInKG().then(() => {\n    if (target.existsInKG) {\n      return 'exist-in-kg';\n    }\n\n    if (!target.dcid && target.localId &&\n        target.localId in ParseMcf.localNodeHash) {\n      return 'exist-in-local';\n    }\n\n    if (!target.dcid && !(target.localId in ParseMcf.localNodeHash)) {\n      return 'not-in-local';\n    }\n    return 'not-in-kg';\n  });\n}\n\nexport {\n  readFileList,\n  clearFiles,\n  retrieveNode,\n  isNodeObj,\n  getElemClass,\n};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* Simple component to render the colors legend. */\nconst colorLegend = {\n  'exist-in-kg': 'Node has dcid that exists in DC KG',\n  'exist-in-local': 'Node has resolved local reference and no dcid',\n  'not-in-local': 'Node has unresolved local reference and no dcid',\n  'not-in-kg': 'Node has dcid which does not exist in DC KG',\n};\n\n/**\n * Sets the window hash value to query a given id.\n *\n * @param {string} homeHash The hash saveed in App's state, preserving file\n *     names within url.\n * @param {string} id The id of the desired node to display. This can be either\n *     a dcid or a local id.\n */\nfunction goToId(homeHash, id) {\n  if (id.includes(':')) {\n    window.location.hash = homeHash + '&id=' + id;\n  } else {\n    window.location.hash = homeHash + '&id=dcid:' + id;\n  }\n}\n\n/**\n * Sets the window hash value to query a given id.\n * @param {string} homeHash The hash saveed in App's state, preserving file\n *     names within url.\n * @param {string} id The id of the desired node to display. This can be either\n *     a dcid or a local id.\n */\nfunction searchId(homeHash, id) {\n  if (id.includes(':')) {\n    window.location.hash = homeHash + '&search=' + id;\n  } else {\n    window.location.hash = homeHash + '&search=dcid:' + id;\n  }\n}\n\n/**\n * Sets the window hash value to given value.\n * @param {string} hash The value that the window's hash should be set to.\n */\nfunction goTo(hash) {\n  window.location.hash = hash;\n}\n\n/**\n * Opens the given file url.\n * @param {String} fileUrl Url of the fileee to open.\n */\nfunction openFile(fileUrl) {\n  if (fileUrl.startsWith('https')) {\n    window.open(fileUrl);\n  }\n}\n\n\nexport {colorLegend, goToId, goTo, openFile, searchId};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {Component} from 'react';\n\nimport * as API from './back-end/server-api.js';\nimport * as utils from './utils.js';\n\nconst NON_BREAKING_SPACE = '\\u00a0';\n\ninterface TriplesTablePropType {\n  /**\n   * List of triples to display as a table\n   */\n  triples: Assertion[];\n  /**\n   * Indicates if the given triples should be displayed as outgoing(False) or\n   * incoming(True).\n   */\n  inverse: boolean;\n  /**\n   * Set id parameter in url to the given id.\n   */\n  goToId: func;\n}\n\ninterface TriplesTableStateType{\n  /**\n   * List of table row elements, each row representing one triple\n   */\n  tableRows: element[];\n  /**\n   * Indicates if triples are currently being fetched from the Data Commons\n   * Knowledge Graph.\n   */\n  fetching: boolean;\n }\n\n/** Displays all given assertions as a table of triples. */\nexport class TriplesTable extends Component {\n  /** Creates TriplesTable component. */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tableRows: null,\n      loading: true,\n    };\n  }\n\n  /**\n  * Gets rows of triples when the array of Assertions from props is updated.\n  * @param {Object} prevProps The previous props before the component\n  *     updated, used to compare if the passed in triples have been modified.\n  */\n  componentDidUpdate(prevProps) {\n    if (prevProps.triples !== this.props.triples) {\n      this.setState({loading: true});\n      this.getTripleRows().then((rows) => {\n        this.setState({\n          tableRows: rows,\n          loading: false,\n        });\n      });\n    }\n  }\n  /**\n  * Returns an html element containing the styled source if the triple is inverse\n  * and the styled target otherwise.\n  * @param {Node|string} target The source of an inverse assertion or the target\n  *     of a direct assertion.\n  * @return {HtmlElement} A single cell of an html row representing a triple.\n  *     Either the source or target of the triple depending if the triple is\n  *     inverse or not.\n  */\n  async getTargetCell(target) {\n    if (API.isNodeObj(target)) {\n      const elemClass = await API.getElemClass(target);\n      return (\n        <div>\n          <span title={utils.colorLegend[elemClass]}>\n            <p className ={'clickable ' + elemClass} onClick ={() =>\n              this.props.goToId(target.localId || target.dcid)}>\n              {target.getRef()}\n            </p>\n          </span>\n        </div>\n      );\n    }\n    return (<p>{target}</p>);\n  }\n\n  /**\n  * Returns an html element containing the styled provenance of the triple. The\n  * provenance if of one of the following formats:\n  *     dc/<dcid>\n  *     <local mcf file>\n  *     <local tmcf file>&<local csv file>\n  *     https://<mcf file path>\n  *     https://<tmcf path>&https://<csv path>\n  *\n  * @param {string} prov The provenance of the triple.\n  * @return {HtmlElement} A single cell of an html row representing a triple.\n  *     Either the source or target of the triple depending if the triple is\n  *     inverse or not.\n  */\n  getProvenanceCell(prov) {\n    if (prov.startsWith('dc/')) {\n      // data commons provenance id\n      return (<p className='clickable dc-provenance'onClick={() =>\n        this.props.goToId(prov)}>{prov}</p>);\n    }\n\n    if (!prov.startsWith('https')) {\n      // local file(s) as provenance\n      return (<p>{prov.replace('&', ', ')}</p>);\n    }\n\n    if (!prov.includes('&')) {\n      // single mcf file as provenance\n      return (<p className='clickable' onClick={() =>\n        utils.openFile(prov)}>{prov.split('/').pop()}</p>);\n    }\n\n    // provenance is one tmcf and one csv\n\n    const fileNames = [];\n    const provNames = [];\n    for (const fileName of prov.split('&')) {\n      fileNames.push(fileName);\n      provNames.push(fileName.split('/').pop());\n    }\n\n    return (\n      <div>\n        <p className='clickable' onClick={() =>\n          utils.openFile(fileNames[0])}>{provNames[0]}</p>\n        <p>,{NON_BREAKING_SPACE}</p>\n        <p className='clickable' onClick={() =>\n          utils.openFile(fileNames[1])}>{provNames[1]}</p>\n      </div>\n    );\n  }\n\n  /**\n  * Converts a list of Assertion objects to an array of HTML row elements that\n  * is displyed in the TriplesTable.\n  *\n  * @return {Array<HtmlElement>} The array of HTML row elements representing\n  *     each triple.\n  */\n  async getTripleRows() {\n    const tripleRows = [];\n    let index = 0; // used to create a unique key for each row element\n\n    for (const assert of this.props.triples) {\n      const missingVal = this.props.inverse ? assert.src : assert.target;\n      const val = await this.getTargetCell(missingVal);\n\n      const prov = this.getProvenanceCell(assert.provenance);\n\n      let rowClassName;\n      if (!assert.provenance.startsWith('dc/')) {\n        // triple is not from DC KG, therefore the row should be bold\n        rowClassName = 'bold';\n      }\n\n      tripleRows.push(\n          <tr className={rowClassName} key={index}>\n            <td>{assert.property}</td>\n            <td>{val}</td>\n            <td>{prov}</td>\n          </tr>,\n      );\n      index += 1;\n    }\n    return tripleRows;\n  }\n\n  /** Renders TriplesTable component.   */\n  render() {\n    if (this.state.loading) {\n      // return null when loading to prevent error in rendering Promise objects\n      return null;\n    }\n    const tableHeaders = this.props.inverse ? (\n        <tr>\n          <th>Property</th>\n          <th>Source</th>\n          <th>Provenance</th>\n        </tr>\n      ) : (\n      <tr>\n        <th>Property</th>\n        <th>Target</th>\n        <th>Provenance</th>\n      </tr>\n    );\n\n    return (\n      <table>\n        <thead>\n          {tableHeaders}\n        </thead>\n        <tbody>\n          {this.state.tableRows}\n        </tbody>\n      </table>\n    );\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n \nimport React from 'react';\n\ninterface LoadingSpinnerPropType {\n  /**\n   * Indicates if spinner should be displayed.\n   */\n  loading: boolean;\n  /**\n   * The message to be displayed while page is loading\n   */\n  msg: string;\n}\n\n// spinning animation to demonstrate loading, used in DisplayNode and Home\nconst LoadingSpinner = (props) => {\n  if (!props.loading) {\n    return null;\n  }\n  return (\n    <div className='centered col'>\n      <br/>\n      <div className='loadingSpinner'></div>\n      <h2>{props.msg}</h2>\n    </div>\n  );\n};\n\nexport {LoadingSpinner};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {Component} from 'react';\n\nimport * as API from './back-end/server-api.js';\nimport {TriplesTable} from './TriplesTable.jsx';\nimport {LoadingSpinner} from './LoadingSpinner.jsx';\nimport {colorLegend} from './utils.js';\n\ninterface DisplayNodePropType {\n  /**\n   * Node object to be displayed to user\n   */\n  node: Node;\n  /**\n   * Set id parameter in url to the given id.\n   */\n  goToId: func;\n}\n\ninterface DisplayNodeStateType {\n  /**\n   * The reference of the node to be displayed to the user.\n   * ex: 'country/IND [l:LocalIndiaNode]'.\n   */\n  ref: string;\n  /**\n   * Indicates if triples are currently being fetched from the Data Commons\n   * Knowledge Graph.\n   */\n  fetching: boolean;\n  /**\n   * The triples that the current node is the subject (or source) of.\n   */\n  asserts: Assertion[];\n  /**\n   * The triples that the current node is the target of.\n   */\n  invAsserts: Assertion[];\n  /**\n   * The class of the element containing the reference of the node should be.\n   */\n  elemClass: string;\n }\n\n/** Displays node data for a given node passed in through props. */\nclass DisplayNode extends Component {\n  /** Creates DisplayNode component. */\n  constructor(props) {\n    super(props);\n    this.state = {\n      ref: null,\n      asserts: [],\n      invAsserts: [],\n      fetching: true,\n    };\n  }\n\n  /** Sets node data when the component mounts. */\n  componentDidMount() {\n    this.setNodeData();\n  }\n\n  /**\n   * Sets node data when the node to display changes.\n   * @param {Object} prevProps The previous props before the component updated,\n   *     used to compare if the passed in node has changed.\n   */\n  componentDidUpdate(prevProps) {\n    if (prevProps.node !== this.props.node) {\n      this.setNodeData();\n    }\n  }\n\n  /**\n   * Loads data to display for the node passed in through props. This includes\n   * fetching the remote data from DC KG for the node.\n   */\n  setNodeData() {\n    const curNode = this.props.node;\n    this.setState({\n      ref: curNode.getRef(),\n      fetching: true,\n      asserts: [],\n      invAsserts: [],\n      elemClass: '',\n    });\n\n    API.getElemClass(curNode).then((elemClass) => {\n      this.setState({elemClass: elemClass})\n    });\n\n    curNode.fetchRemoteData().then(() => {\n      this.setState({\n        asserts: curNode.assertions,\n        invAsserts: curNode.invAssertions,\n        fetching: false,\n      });\n    });\n  }\n\n  /** Renders the DisplayNode component. */\n  render() {\n    return (\n      <div>\n        <br/>\n        <h1 className='inline'>Currently Viewing: </h1>\n        <span title={colorLegend[this.state.elemClass]}>\n          <h1 className={'inline ' + this.state.elemClass}>{this.state.ref}</h1>\n        </span>\n        <br/>\n        <LoadingSpinner loading={this.state.fetching}\n          msg='...fetching triples...'/>\n        <br/>\n        <h3 className='inline padded'>Node Properties</h3>\n        <p className='inline'> - current node is source</p>\n        <br/>\n        <TriplesTable triples={this.state.asserts} inverse={false}\n          goToId={this.props.goToId}/>\n        <br/>\n        <h3 className='inline padded'>Incoming Properties from Other Nodes</h3>\n        <p className='inline'> - current node is target</p>\n        <br/>\n        <TriplesTable triples={this.state.invAsserts} inverse={true}\n          goToId={this.props.goToId}/>\n      </div>\n    );\n  }\n}\nexport {DisplayNode};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {Component} from 'react';\n\nconst ENTER_KEY = 13;\n\ninterface HeaderPropType {\n  /**\n   * Set a 'search' parameter in url to the specified id.\n   */\n  searchId: func;\n  /**\n   * Return to the home page.\n   */\n  onHomeClick: func;\n  /**\n   * Nodes stored in App's state which are the subject nodes of triples from\n   * any parsed files.\n   */\n  subjIds: Node[];\n}\n\ninterface HeaderStateType {\n  /**\n   * Text input from user via search bar.\n   */\n  searchVal: string;\n }\n\n/** Header component contains the id search bar, upload files, and return home\n  * button.\n  */\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchVal: '',\n    };\n  }\n  /**\n  * Calls props method to search for an id when the user presses enter.\n  * @param {Event} event OnKeyUp event from html search input element.\n  */\n  handleSearch(event) {\n    if (event.keyCode === ENTER_KEY) {\n      this.props.searchId(event.target.value);\n      this.setState({searchVal: ''});\n    }\n  }\n  /** Renders header element */\n  render() {\n    return (\n      <div className='Header'>\n        {/* return home button*/}\n        <button className='button' onClick={this.props.onHomeClick}>\n          Return Home\n        </button>\n\n        {/* search for id w/dropdown of suggestions of the subject nodes*/}\n        <input type=\"search\" list=\"subjIds\" placeholder=\"Search by id\"\n          value={this.state.searchVal}\n          onChange={(event) => this.setState({searchVal: event.target.value})}\n          onKeyUp={(event) => {\n            this.handleSearch(event);\n          }}/>\n        <datalist id=\"subjIds\">\n          {this.props.subjIds.map((subjId) => <option value={subjId}\n            key={subjId}/>)}\n        </datalist>\n      </div>\n    );\n  }\n}\nexport {Header};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\n\ninterface ParsingErrorsTablePropType {\n   /**\n   * The App state's parsingErrs list of error message Objects from parsing\n   * files. Each object in the array contains one file name and one list of\n   * errors found in that file.\n   */\n  errsList: Object[];\n}\n\n/* Simple component to render the parsing errors table. */\nconst ParsingErrorsTable = (props) => {\n  if (!props.errsList.length) {\n    return null;\n  }\n  return (\n    <div className = 'box'>\n      <h3>Parsing Errors</h3>\n      <table>\n        <thead><tr>\n          <th>File Name</th>\n          <th>Line Num</th>\n          <th>Line</th>\n          <th>Error Message</th>\n        </tr></thead>\n        <tbody>\n          {props.errsList.map((errObj) => (\n            errObj['errs'].map((msg) =>\n            <tr key={msg[0]}>\n              <td>{errObj['file']}</td>\n              <td>{msg[0]}</td>\n              <td>{msg[1]}</td>\n              <td>{msg[2]}</td>\n            </tr>\n          )))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport {ParsingErrorsTable};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {Component} from 'react';\n\ninterface FileEntryPropType {\n  /**\n   * Passes a file list to be submitted to the back-end for parsing.\n   */\n  upload: func;\n  /**\n   * Passes a list of urls to be retrieved, then passed to the back-end for\n   * parsing.\n   */\n  loadFiles: func;\n  /**\n   * Return to the home page/reset to current hash stored in App state.\n   */\n  goToHome: func;\n  /**\n   * Sets whether the dropdown on the home page for additonal file entries\n   * should be displayed.\n   */\n  toggle: func;\n}\n\ninterface FileEntryStateType{\n  /**\n   * Stores user's text entry in the first url entry box. This should be a url\n   * to either a MCF or TMCF file.\n   */\n  mcfTmcfUrl: string;\n  /**\n   * Stores user's text entry in the second url entry box. This should be a url\n   * to a CSV file.\n   */\n  csvUrl: string;\n }\n\n/** Component to display options user has for uploading files. */\nclass FileEntry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mcfTmcfUrl: '',\n      csvUrl: '',\n    };\n  }\n\n  /**\n   * Submits the urls currently in the text input boxes to be retreived and\n   * loaded when the enter key is preessed.\n   *\n   * @@param {Event Obj} event The keyUp event that triggers the function call.\n   */\n  async handleUrlKeyUp(event) {\n    if (event.keyCode === 13) {\n      if (this.state.mcfTmcfUrl.split('.').pop() === 'mcf') {\n        // set the base file hash with the given file names\n        await this.props.loadFiles([this.state.mcfTmcfUrl]);\n        this.setState({csvUrl: '', mcfTmcfUrl: ''});\n        // trigger hash to be set to fileHash\n        this.props.goToHome();\n        this.props.toggle();\n      } else if (this.state.mcfTmcfUrl.split('.').pop() === 'tmcf' &&\n          (this.state.csvUrl.split('.').pop() === 'csv') ) {\n        await this.props.loadFiles([this.state.mcfTmcfUrl, this.state.csvUrl]);\n        this.setState({csvUrl: '', mcfTmcfUrl: ''});\n        // trigger hash to be set to fileHash\n        this.props.goToHome();\n        this.props.toggle();\n      }\n    }\n  }\n  render() {\n    return (\n      <div className=\"row\" >\n        {/* Options to directly upload a file via file selector. */}\n        <div className=\"centered col\" >\n          <h4>Choose file(s) to upload:</h4>\n\n          {/* upload MCF file(s) */}\n          <label className='button'>\n            <input type=\"file\" required multiple\n              accept=\".mcf\" onChange={(event) => {\n                this.props.upload(Array.from(event.target.files));\n                this.props.toggle();\n              }}/>\n              Upload MCF\n          </label>\n\n          {/* upload one pair of TMCF CSV files */}\n          <label className='button'>\n            <input type=\"file\" required multiple\n              accept=\".tmcf,.csv\" onChange={(event) => {\n                this.props.upload(Array.from(event.target.files));\n                this.props.toggle();\n              }}/>\n              Upload TMCF + CSV\n          </label>\n        </div>\n\n        <div className=\"centered col\">\n          <h3>-OR-</h3>\n        </div>\n\n        {/* Options to specify url(s) to file(s). */}\n        <div className=\"centered col\" >\n          <h4>Enter URL(s):</h4>\n          <div className=\"col url-entry\" >\n\n            {/* TMCF/MCF url input */}\n            <label>MCF / TMCF:\n              <input type=\"text\"\n                value={this.state.mcfTmcfUrl}\n                onChange={(event) =>\n                  this.setState({mcfTmcfUrl: event.target.value})}\n                onKeyUp={(event) => this.handleUrlKeyUp(event)}/>\n            </label>\n\n            {/* CSV url input */}\n            <label>CSV:\n              <input type=\"text\" placeholder=\"leave blank for mcf files\"\n                value={this.state.csvUrl}\n                onChange={(event) =>\n                  this.setState({csvUrl: event.target.value})}\n                onKeyUp={(event) => this.handleUrlKeyUp(event)}/>\n            </label>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport {FileEntry};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {Component} from 'react';\nimport {openFile} from './utils.js';\nimport {LoadingSpinner} from './LoadingSpinner.jsx';\nimport {ParsingErrorsTable} from './ParsingErrorsTable.jsx';\nimport {FileEntry} from './FileEntry.jsx';\n\ninterface HomePropType {\n  /**\n   * List of the files that have been uploaded by user.\n   */\n  fileList: Blob[];\n  /**\n   * Passes a file list to be submitted to the back-end for parsing.\n   */\n  upload: func;\n  /**\n   * Passes a list of urls to be retrieved, then passed to the back-end for parsing.\n   */\n  loadFiles: func;\n  /**\n   * Return to the home page.\n   */\n  goToHome: func;\n  /**\n   * Clears the loaded data from all files and resets App to its initial state.\n   */\n  clear: func;\n  /**\n   * Error messages from parsing files specifying line number, line, and helpful\n   * message indicating the error.\n   */\n  errs: string[][];\n  /**\n   * Indicates if uploaded files are currently being parsed.\n   */\n  loading: boolean;\n  /**\n   * Nodes stored in App's state which are the subject nodes of triples from\n   * any parsed files.\n   */\n  subjNodes: Node[];\n  /**\n   * Set id parameter in url to the given id. Used when user clicks a subject node to explore.\n   */\n  goToId: func;\n}\n\ninterface HomeStateType{\n  /**\n   * Determines if the file entry dropdown option should be displayed.\n   */\n  dropdown: boolean;\n }\n\n/** Displays the currently loaded files, clear button, parsing errors, and\n  * subject nodes.\n  */\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdown: false,\n    };\n  }\n\n  toggleDropdown() {\n    this.setState({dropdown: !this.state.dropdown});\n  }\n\n  render() {\n    if (this.props.fileList.length === 0) {\n      // show file entry options, but do not toggle dropdown on file submission\n      return (\n        <div className=\"home centered col\">\n          <div className=\"box \">\n            <FileEntry upload={this.props.upload}\n              loadFiles={this.props.loadFiles}\n              goToHome={this.props.goToHome}\n              toggle={() => {}}/>\n          </div>\n        </div>\n      );\n    }\n\n    let addFileButtonClass;\n    let addFileButtonText;\n\n    if(this.state.dropdown){\n      addFileButtonClass = 'button expanded';\n      addFileButtonText = 'Add File (-)';\n    } else {\n        addFileButtonClass = 'button';\n        addFileButtonText = 'Add File (+)';\n    }\n\n    // show current files and subject nodes\n    return (\n      <div className=\"centered col\">\n\n        {/* list current file names*/}\n        <div className = \"box\">\n          <h3>Current Files</h3>\n          <ul>\n            {this.props.fileList.map((file, index) => {\n              const className = file.name.startsWith('https:') ?\n                'clickable' : '';\n              return (\n                <li onClick={() => {\n                  if (className) openFile(file.name);\n                }}\n                className={className} key={file.name+index}>{file.name}</li>\n              );\n            })}\n          </ul>\n          <br/>\n\n          {/* display clear files button*/}\n          <button className='button' onClick={this.props.clear} >Clear</button>\n\n          <button className={addFileButtonClass} onClick={() =>\n            this.toggleDropdown()}>{addFileButtonText}</button>\n\n          {this.state.dropdown ?\n            <FileEntry\n              upload={this.props.upload}\n              loadFiles={this.props.loadFiles}\n              goToHome={this.props.goToHome}\n              toggle={() => this.toggleDropdown()}/> : null }\n\n        </div>\n        <br/>\n\n        {/* display parsing errors, if any*/}\n        <ParsingErrorsTable errsList={this.props.errs}/>\n        <br/>\n\n        <div className = \"box\">\n          \n          {/* display loading animation while waiting*/}\n          <LoadingSpinner loading={this.props.loading}\n            msg='...loading mcf...'/>\n\n          {/* display list of subject noode ids*/}\n          <h3>Subject Nodes</h3>\n          <ul>\n            {this.props.subjNodes.map((dcid) =>\n              <li className='clickable' key={dcid}\n                onClick={() => this.props.goToId(dcid)}>{dcid}</li>)}\n          </ul>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport {Home};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport './index.css';\n\nimport React, {Component} from 'react';\n\nimport axios from 'axios';\n\nimport {DisplayNode} from './DisplayNode.jsx';\nimport {Header} from './Header.jsx';\nimport {Home} from './Home.jsx';\nimport * as utils from './utils.js';\nimport * as API from './back-end/server-api.js';\n\ninterface AppStateType{\n  /**\n   * Subject nodes of the triples from files uploaded by user.\n   */\n  subjNodes: Node[];\n  /**\n   * Node that should be displayed.\n   */\n  curNode: Node;\n  /**\n   * Files that have been uploaded by user.The locality of the csv files in\n   * relation to the tmcf files is very important! The csv will be paired with\n   * the closest tmcf file that comes before it whenever we are loading/parsing\n   * the files in the backend.\n   */\n  files: Blob[];\n  /**\n   * Indicates if any files are currently being parsed by back-end.\n   */\n  loading: boolean;\n  /**\n   * Indicates if url needs to be parsed on component mount. True when the\n   * application first loads and when files are cleared by user.\n   */\n  firstLoad: boolean;\n  /**\n   * Array of error message objects, one object per parsed file with errors. The\n   * property 'errs' is in each object is an array of String arrays, one String\n   * array per error within the given file which specifies line number, line,\n   * and helpful message indicating the error. The 'file' property provides the\n   * file name from which the error came.\n   */\n  parsingErrs: Object[];\n  /**\n   * Contains the remote files specified by user in url format to be used as a\n   * home base in the hash portion of the url while using those files.\n   */\n  fileHash: string;\n\n}\n/** Drives the entire app and holds the state of the files and current node. */\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subjNodes: [],\n      curNode: null,\n      files: [],\n      loading: false,\n      firstLoad: true,\n      parsingErrs: [],\n      fileHash: '#',\n    };\n    // save state for easy reset when user 'clears' files\n    this.initialState = this.state;\n  }\n\n  /**\n   * Adds an event listener to the window to respond to url hash changes. Calls\n   * the method to parse the url if the mount is the first time loading the app.\n   */\n  componentDidMount() {\n    window.addEventListener('hashchange', () => this.handleHashChange(), false);\n    if (this.state.firstLoad) {\n      this.parseUrl();\n      this.setState({firstLoad: false});\n    }\n  }\n\n  /**\n   * Sets App state according to url parameters 'id' and 'search'.\n   * The param 'id' is only set when the user clicks to the next node while\n   * navigating the triples tables or the subject nodes list.\n   * The 'search' param is set when the user uses the search bar. This causes\n   * the dcid of the retreived node to try to be set so that a node will always\n   * be displayed when a user seearches for it. If it does not exist in the KG,\n   * then the node id will appear red in the display.\n   */\n  handleHashChange() {\n    let node = null;\n\n    const params = new URLSearchParams(window.location.hash.split('#')[1]);\n    let nodeId = params.get('id');\n\n    if (nodeId) {\n      node = API.retrieveNode(nodeId, /* shouldCreateRemote */ false);\n    } else {\n      nodeId = params.get('search');\n      if (nodeId) {\n        node = API.retrieveNode(nodeId, /* shouldCreateRemote */ true);\n      }\n    }\n    this.setState({curNode: node});\n  }\n\n  /**\n   * Parses the URL upon the first load of the app. It loads the files that\n   * are specfied or navigates to a node if an id specified by the search\n   * param.\n   */\n  parseUrl() {\n    const params = new URLSearchParams(window.location.hash.trim('#'));\n    const fileUrls = params.getAll('file');\n\n    if (fileUrls.length) {\n      this.loadRemoteFiles(fileUrls);\n    } else {\n      // get node to display from url\n      const searchId = params.get('search');\n      if (searchId) {\n        const node = API.retrieveNode(searchId, /* shouldCreateRemote */ true);\n        this.setState({curNode: node});\n      }\n    }\n  }\n\n  /**\n   * Saves the file params as part of App's state so that the files remain in\n   * the hash of the url when navigating between nodes.\n   * @param {Array<String>} fileUrlList File url list to be saved in the hash.\n   */\n  appendfileHash(fileUrlList) {\n    let hash = this.state.fileHash;\n    for (const fileUrl of fileUrlList) {\n      hash += '&file=' + fileUrl;\n    }\n    this.setState({fileHash: hash});\n  }\n\n  /**\n   * Retrieves file Blobs from array of file Urls, submits the new blobs to be\n   * parsed, and appends them to App's state list of files uploaded by user.\n   * @param {Array<string>} fileUrls The array of file urls to load and append\n   *     to App state's files object.\n   */\n  async loadRemoteFiles(fileUrls) {\n    this.appendfileHash(fileUrls);\n\n    const newFiles = [];\n    for (const fileUrl of fileUrls) {\n      const res = await axios.request({\n        url: fileUrl,\n        method: 'GET',\n        responseType: 'blob', // important\n      });\n\n      res.data.name = fileUrl;\n      newFiles.push(res.data);\n\n      this.setState((prevState) => ({\n        files: [...prevState.files, res.data],\n      }));\n    }\n    this.submitFileList(newFiles);\n  }\n\n  /**\n   * Saves the list of new blob files to App' state list of files and submits\n   * them to be parsed.\n   * @param {Array<Blob>} fileList File blobs selcted by user via file picker.\n   */\n  async uploadFiles(fileList) {\n    for (const file of fileList) {\n      await this.setState((prevState) => ({\n        files: [...prevState.files, file],\n      }));\n    }\n    this.submitFileList(fileList);\n  }\n\n  /**\n   * Passes list of file blobs to the 'back-end' API to be parsed and loaded\n   * into memory.\n   * @param {Array<Blob>} fileList File blobs to be parsed by back-end.\n   */\n  submitFileList(fileList) {\n    this.setState({loading: true});\n\n    API.readFileList(fileList).then((res) => {\n      this.setState(prevState => ({\n        parsingErrs: prevState['parsingErrs'].concat(res['errMsgs']),\n        subjNodes: res['localNodes'],\n        loading: false,\n      }), () => this.handleHashChange());\n    });\n  }\n\n  /**\n   * Clear App state and calls the 'back-end' API clearFiles method.\n   */\n  onClearPress() {\n    this.setState(this.initialState);\n    API.clearFiles();\n    utils.goTo('');\n  }\n\n  /**\n   * Renders the browser by displaying a specific node or the homepage.\n   */\n  render() {\n    return (\n      <div id=\"app\" >\n        <Header subjIds={this.state.subjNodes}\n          onHomeClick={() => utils.goTo(this.state.fileHash)}\n          searchId={(id) => utils.searchId(this.state.fileHash, id)}/>\n\n        {this.state.curNode ?\n            // if curNode is set, then display it\n            <DisplayNode node={this.state.curNode}\n              goToId={(id) => utils.goToId(this.state.fileHash, id)}/> :\n            // otherwise display home\n            <Home\n              fileList={this.state.files}\n              clear={() => this.onClearPress()}\n              errs={this.state.parsingErrs}\n              loading={this.state.loading}\n              subjNodes={this.state.subjNodes}\n              upload={(files) => this.uploadFiles(files)}\n              goToId={(id) => utils.goToId(this.state.fileHash, id)}\n              loadFiles={(filesList) => this.loadRemoteFiles(filesList)}\n              goToHome={() => utils.goTo(this.state.fileHash)}/>\n        }\n      </div>\n    );\n  }\n}\nexport {App};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {App} from './App.jsx';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}