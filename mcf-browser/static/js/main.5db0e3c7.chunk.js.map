{"version":3,"sources":["back-end/utils.js","back-end/graph.js","back-end/parse-mcf.js","back-end/parse-tmcf.js","back-end/server-api.js","utils.js","TriplesTable.js","DisplayNode.js","Header.js","Home.js","App.js","index.js"],"names":["API_ROOT","ERROR_MESSAGES","getRemotePropertyLabels","dcid","a","targetUrl","fetch","then","res","json","data","JSON","parse","payload","getRemotePropertyValues","label","isInverse","triples","in","out","getValueFromValueObj","valueObj","Error","value","Node","getNode","setDCID","existsInKG","doesExistsInKG","url","shouldReadLine","line","startsWith","length","id","this","localId","alreadyFetched","assertions","invAssertions","nodeHash","remote","mergeNode","absorbedNode","forEach","assert","src","push","invAssert","target","propLabels","valueList","val","isNode","source","Assertion","provenanceId","allLabels","createAssertionsFromLabels","outLabels","inLabels","dcidRef","localRef","includes","join","trim","existing","obj","property","provenance","Object","NAMESPACES","ParseMcf","fileName","prov","curNode","lineNum","errors","propValues","values","split","propValue","namespace","substring","indexOf","replace","parsedValues","nodeRef","ns","nodeId","localNodeHash","propLabel","parsePropValues","setCurNode","setCurNodeDCID","createAssertionsFromParsedValues","mcf","lines","parseLine","localNodes","keys","errMsgs","file","fileReader","FileReader","readAsText","Promise","rej","addEventListener","result","mcfParser","name","parseMcfStr","getArrowId","getEntityID","localIdMatch","match","ParseTmcf","csvIndex","entityID","csvRow","filledValues","filledValue","colName","getLocalIdFromEntityId","template","filledTemplate","fillPropertyValues","csvRows","mcfLines","row","fillTemplateFromRow","csvFile","csv","fromString","csvToMcf","tmcfFile","readTmcfFile","readCsvFile","fileList","endsWith","mcfFile","readFile","generateMcf","console","log","retrieveNode","shouldCreateRemote","retrieved","isNodeObj","getElemId","setExistsInKG","fileHash","goToId","window","location","hash","setFileHash","fileUrlList","fileUrl","openFile","open","LoadingSpinner","props","loading","className","msg","TriplesTableHeaderRow","inverse","getTargetCell","API","elemId","onClick","utils","getRef","getProvenanceCell","pop","fileNames","provNames","TriplesTable","state","tableRows","prevProps","setState","getTripleRows","rows","tripleRows","index","missingVal","rowClassName","key","e","Component","ColorLegend","DisplayNode","ref","asserts","invAsserts","fetching","setNodeData","node","fetchRemoteData","Header","event","keyCode","type","title","onChange","upload","Array","from","files","accept","required","multiple","list","onKeyUp","handleSearch","placeholder","subjIds","map","subjId","ParsingErrorsTable","errsList","Home","clear","errs","subjNodes","App","firstLoad","parsingErrs","handleHashChange","parseUrl","params","URLSearchParams","fileUrls","getAll","loadRemoteFiles","searchId","get","i","submitFileList","xhr","XMLHttpRequest","responseType","onload","response","concat","send","filesList","uploadFiles","onClearPress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5db0e3c7.chunk.js","sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Module contains helper functions for api calls to data commons as well as\n * helper functions for parsing file to create local knowledge graph.\n */\n\nimport {Node} from './graph.js';\nconst API_ROOT = 'https://api.datacommons.org';\n\nconst ERROR_MESSAGES =\n    {\n      'curNode-length': 'error in declaring node',\n      'curNode-ns': 'invalid namespace in node declaration',\n      'setDCID-noCur': 'current node must be set before setting dcid',\n      'setDCID-multiple': 'a node can only have one dcid',\n      'setDCID-ref': 'dcid property must be a string, not a node reference',\n      'setDCID':\n          'cannot set dcid for current node; check if dcid is already set',\n      'assert-noCur': 'current node must be set before declaring properties',\n      'parse-noColon': 'missing \\':\\', incorrect mcf triple format',\n      'parse-noLabel': 'missing property label',\n      'parse-noValues': 'missing property value',\n    };\n\n/**\n * Gets all property labels of the given dcid that are in the DC KG.\n *\n * @param {string} dcid The dcid of the node to find property labels for.\n * @return {Object} An object containing both 'in' and 'out' property labels.\n */\nasync function getRemotePropertyLabels(dcid) {\n  const targetUrl = API_ROOT + '/node/property-labels?dcids=' + dcid;\n  return fetch(targetUrl)\n      .then((res) => res.json())\n      .then((data) => JSON.parse(data.payload)[dcid]);\n}\n\n/**\n * Gets all property values containing the given dcid, property label, and\n * direction.\n *\n * @param {string} dcid The dcid of the node to find property value for.\n * @param {string} label The property label to query for.\n * @param {boolean} isInverse Direction of property label, false indicates\n *     an outgoing label, true is an incoming label.\n * @return {Object} An object containing all found values matching the query.\n */\nasync function getRemotePropertyValues(dcid, label, isInverse) {\n  const direction = isInverse ? 'in' : 'out';\n  const targetUrl =\n      (API_ROOT + '/node/property-values?limit=500&dcids=' + dcid +\n       '&property=' + label + '&direction=' + direction);\n\n  return fetch(targetUrl)\n      .then((res) => res.json())\n      .then((data) => JSON.parse(data.payload)[dcid])\n      .then((triples) => isInverse ? triples.in : triples.out);\n}\n\n/**\n * Parses an Object returned from the DC REST get_values API to create a Node\n * object from the value's dcid or to return the string value that the object\n * holds.\n *\n * @param {Object} valueObj An object returned from DC REST get_values API.\n * @return {Node | string} The created Node if the value object has a dcid,\n *     otherwise the string of the value.\n */\nfunction getValueFromValueObj(valueObj) {\n  if (!('dcid' in valueObj || 'value' in valueObj)) {\n    throw new Error(\n        'ERROR: DC API returned an object with no \"dcid\" or \"value\" field: ' +\n        valueObj);\n  }\n\n  if ('dcid' in valueObj) {\n    const value = Node.getNode('dcid:' + valueObj.dcid);\n    value.setDCID(valueObj.dcid);\n    value.existsInKG = true;\n    return value;\n  }\n  return valueObj.value;\n}\n\n/**\n * Queries Data Commons to determine if a given dcid is a part of any\n * triples in the Knowledge graph.\n * @param {string} dcid The dcid to check if exists in Data Commons\n * @return {Promise<boolean>} Returns true if given dcid is in any triples in\n *     Data Commons Knowledge Graph.\n */\nasync function doesExistsInKG(dcid) {\n  const url = API_ROOT + '/node/triples?dcids=' + dcid + '&limit=1';\n  return fetch(url)\n      .then((res) => res.json())\n      .then((data) => JSON.parse(data.payload)[dcid] ? true : false);\n}\n\n/**\n * Indicates if a line should be parsed.\n * @param {string} line The line to be checked.\n * @return {boolean} False if the line is a comment or empty, otherwise\n *     true.\n */\nfunction shouldReadLine(line) {\n  if (line.startsWith('//') || line.length === 0 || line.startsWith('#')) {\n    return false;\n  }\n  return true;\n}\n\nexport {\n  ERROR_MESSAGES,\n  getRemotePropertyLabels,\n  getRemotePropertyValues,\n  getValueFromValueObj,\n  doesExistsInKG,\n  shouldReadLine,\n};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Module contains Node and Assertion classes which together create a local\n * version of the Data Commons Knowledge Graph.\n */\n\nimport {\n  doesExistsInKG,\n  getRemotePropertyLabels,\n  getRemotePropertyValues,\n  getValueFromValueObj,\n} from './utils.js';\n\n/** Class representation of a single Node in the KG. */\nclass Node {\n  /**\n   * The local id used in a parsed mcf file.\n   * @type {string}\n   */\n  localId;\n\n  /**\n   * Whether triples from the remote Data Commons Knowledge Graph have already\n   * been fetched.\n   * @type {boolean}\n   */\n\n  alreadyFetched;\n\n  /**\n   * Whether the node exists in the Data Commons Knowledge Graph.\n   * @type {boolean}\n   */\n  existsInKG;\n\n  /**\n   * Dcid of the node. Set only if a remote id is referred to in a local file or\n   * pulled from the Data Commons Knowledge Graph.\n   * @type {string}\n   */\n\n  dcid;\n  /**\n   * Array of Assertion objects representing the outgoing triples of the Node\n   * object.\n   * @type {Array<Assertion>}\n   */\n  assertions;\n  /**\n   * Array of Assertion objects representing the incoming triples of the Node\n   * object.\n   * @type {Array<Assertion>}\n   */\n  invAssertions;\n\n  /**\n   * Create a Node based on a given id.\n   * @param {string} id The id of the node to create, including the namespace.\n   */\n  constructor(id) {\n    this.localId = id.startsWith('l:') ? id : null;\n    this.dcid = null;\n\n    this.alreadyFetched = false;\n    this.existsInKG = false;\n\n    this.assertions = [];\n    this.invAssertions = [];\n\n    Node.nodeHash[id] = this;\n  }\n\n  /**\n   * Returns a node with the given ID. All callers of this function expect a\n   * Node object to be returned.If the node does not exist already, then it\n   * should be created. If the created node with the requested id does not exist\n   * in the local file or in the Data Commons Knowledge Graph, then the\n   * front-end will demonstrate this to the user. \n   *\n   * @param {string} id The id of the node to find, including the namespace.\n   * @return {Node} The found node if it exists or is created.\n   */\n  static getNode(id) {\n    const existing = Node.nodeHash[id];\n    return existing ? existing : new Node(id);\n  }\n\n  /**\n   * Indicates if a given object is an instance of Node class.\n   * @param {Object} obj The object to check.\n   * @return {boolean} True if the object is an instance of Node.\n   */\n  static isNode(obj) {\n    return obj instanceof Node;\n  }\n\n  /**\n   * Sets the dcid of Node object. Checks if a separate node based on the dcid\n   * already exists. If remote node exists, then the remote node is absorbed by\n   * current node via mergeNode() method.\n   *\n   * @param {string} dcid The dcid to be added to the Node object, should not\n   *     include the dcid namespace.\n   * @return {boolean} False if the node already has a different dcid, true\n   *     otherwise.\n   */\n  setDCID(dcid) {\n    if (this.dcid && this.dcid !== dcid) {\n      return false;\n    }\n\n    const remote = Node.nodeHash['dcid:' + dcid];\n    if (remote && remote !== this) {\n      this.mergeNode(remote);\n    }\n    this.dcid = dcid;\n    Node.nodeHash['dcid:' + dcid] = this;\n    return true;\n  }\n\n  /**\n   * Moves the assertions and inverse Assertions from the given param node to\n   * the calling Node object by changing the src property for assertions and the\n   * target property of the invAssertions.\n   *\n   * @param {Node} absorbedNode The node object whose triples should be copied.\n   */\n  mergeNode(absorbedNode) {\n    if (this.localId === absorbedNode.localId) {\n      return;\n    }\n\n    absorbedNode.assertions.forEach((assert) => {\n      assert.src = this;\n      this.assertions.push(assert);\n    });\n\n    absorbedNode.invAssertions.forEach((invAssert) => {\n      invAssert.target = this;\n      this.invAssertions.push(invAssert);\n    });\n  }\n\n  /**\n   * Sets the property existsInKG to true if the Node has triples in the DC KG.\n   */\n  async setExistsInKG() {\n    if (!this.dcid || this.existsInKG) {\n      return;\n    }\n    this.existsInKG = await doesExistsInKG(this.dcid);\n  }\n\n  /**\n   * Creates Assertion objects from a list of property labels by calling the\n   * helper function getRemotePropertyValues from utils.js to find the values\n   * in Data Commons given the current node, a property label, and the direction\n   * of the label.\n   *\n   * @param {Array<string>} propLabels List of property labels associated with\n   *     the calling Node object in Data Commons.\n   * @param {boolean} isInverse True if the list of labels are incoming labels,\n   *     meaning the calling Node object is the target of the triple. False if\n   *     the calling Node is the source of the triple.\n   */\n  async createAssertionsFromLabels(propLabels, isInverse) {\n    for (const label of propLabels) {\n      await getRemotePropertyValues(this.dcid, label, isInverse)\n          .then((valueList) => {\n            if (!valueList) {\n              throw new Error('No property values for dcid: ' + this.dcid +\n                              ' label: ' + label);\n            }\n\n            valueList.forEach((valueObj) => {\n              const val = getValueFromValueObj(valueObj);\n\n              if (isInverse && !Node.isNode(val)) {\n                throw new Error(\n                    'Error creating assertion with non Node source');\n              }\n\n              const source = isInverse ? val : this;\n              const target = isInverse ? this : val;\n\n              // if val is a node and has already been fetched, then the\n              // assertion would already be stored in both nodes\n              if (!Node.isNode(val) || !val.alreadyFetched) {\n                new Assertion(source, label, target, valueObj.provenanceId);\n              }\n            });\n          });\n    }\n  }\n\n  /**\n   * Stores remote triples as assertions and inverse Assertions of the calling\n   * Node object. Sets the alreadyFetched property to true if data is fetched.\n   */\n  async fetchRemoteData() {\n    if (this.alreadyFetched || !this.dcid) {\n      return;\n    }\n\n    await getRemotePropertyLabels(this.dcid).then(async (allLabels) => {\n      await this.createAssertionsFromLabels(allLabels.outLabels,\n          /* isInverse */ false);\n      await this.createAssertionsFromLabels(allLabels.inLabels,\n          /* isInverse */ true);\n    });\n    this.alreadyFetched = true;\n  }\n\n  /**\n   * Returns the reference to the node that is displayed in browser. If the\n   * node has a dcid, then the dcid will be displayed. If the node's local id\n   * is different, then the local id is also displayed.\n   * Ex: <dcid> [l:<localId>]\n   * @return {string} The reference to the node to be displayed.\n   */\n  getRef() {\n    const dcidRef = this.dcid ? this.dcid : '';\n    let localRef = '';\n\n    if (this.localId && !this.localId.includes('dcid')) {\n      localRef = '[' + this.localId + ']';\n    }\n    return [dcidRef, localRef].join(' ').trim();\n  }\n}\n\nNode.nodeHash = {}; // stores all created nodes\n\n/** Class representation of a single Assertion or triple in the KG. */\nclass Assertion {\n  /**\n   * The source or subject of the triple.\n   * @type {Node}\n   */\n  src;\n  /**\n   * The property label or predicate of the triple.\n   * @type {string}\n   */\n  property;\n  /**\n   * The provenance of the triple.\n   * @type {string}\n   */\n  provenance;\n  /**\n   * The target or object of the triple.\n   * @type {string|Node}\n   */\n  target;\n\n  /**\n   * Create a triple, setting the source's assertion prop to be the new object.\n   *\n   * @param {Node} src The source or subject of the triple.\n   * @param {string} property The property label of the triple.\n   * @param {Node|string} target The predicate or target of the triple.\n   * @param {string} provenance The provenance of the triple.\n   */\n  constructor(src, property, target, provenance) {\n    this.src = src;\n    this.property = property;\n    this.provenance = provenance;\n    this.target = target;\n\n    src.assertions.push(this);\n\n    if (target instanceof Object) {\n      target.invAssertions.push(this);\n    }\n  }\n}\n\nexport {Node, Assertion};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Parses an mcf file and creates local knowledge graph of the parsed data\n * using Node and Assertion Class objects.\n */\n\nimport {Assertion, Node} from './graph.js';\nimport {ERROR_MESSAGES, shouldReadLine} from './utils.js';\n\nconst NAMESPACES = {\n  'l': 'l',\n  'schema': 'dcid',\n  'dcs': 'dcid',\n  'dcid': 'dcid',\n};\n\n/** Class responsible for parsing an mcf file. */\nclass ParseMcf {\n  /**\n   * Provenance to be used for any Assertion objects created during parsing,\n   * based off of the mcf file name.\n   * @type {string}\n   */\n  prov;\n  /**\n   * Current subject Node for any Assertion created. Set when a 'Node:' property\n   * label is parsed.\n   * @type {Node}\n   */\n  curNode;\n  /**\n   * Current line number of the line being parsed, used for identifying location\n   * of syntax error in the mcf file.\n   * @type {number}\n   */\n\n  lineNum;\n\n  /**\n   * List of error messages regarding mcf syntax that are to be displayed to\n   * the user. A single entry of this array should be in the format of:\n   * [line number, line, error message]\n   * @type {Array<Array<String>>}\n   */\n  errors;\n  /**\n   * Create a ParseMcf object which keeps tracks of the current source node of\n   * each triple in the mcf and the provenance, which is the mcf file name.\n   * @param {string} fileName Name of the file to be parsed.\n   */\n  constructor(fileName) {\n    this.prov = fileName;\n    this.curNode = null;\n    this.lineNum = -1;\n    this.errors = [];\n  }\n\n  /**\n   * Parses a string representing a comma separated list of property values\n   * from a line of an mcf file. Returns a list having either a string or\n   * <namespace, reference> pair.\n   *\n   * @param {string} propValues A comma separated list of property values.\n   * @return {Array<(string|Object)>} Array of\n   *     parsed values.\n   */\n  parsePropValues(propValues) {\n    const values = [];\n    // split propValues on commas which are not enclosed by double quotes\n    // split string at each comma followed by even number of double quotes\n    // caveat: does not work if quotes are unbalanced\n    for (const propValue of propValues.split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/)) {\n      const namespace = propValue.split(':')[0].trim();\n      if (namespace in NAMESPACES) {\n        values.push({\n          'ns': namespace,\n          'ref': propValue.substring(propValue.indexOf(':') + 1).trim(),\n        });\n      } else if (propValue.split(':').length > 1 &&\n                 !namespace.startsWith('\"')) {\n        this.errors.push([this.lineNum, this.line, 'unrecognized namespace']);\n        return [];\n      } else {\n        // push property value with surrounding double quotes trimmed\n        values.push(propValue.replace(/^[\" ]*(.*?)[\" ]*$/g, '$1'));\n      }\n    }\n    return values;\n  }\n\n  /**\n   * Sets curNode variable of the calling ParseMcf object based on the passed in\n   * parsed values of a line of mcf, given the property label for the line was\n   * 'Node'. The parsed value either is a local reference with or without the\n   * 'l' namespace, or it has a remote namespace. If the namespace is remote,\n   * then the dcid for curNode is set. Updates localNodeHash mapping to store\n   * the subject nodes to be displayed in home screen of browser.\n   *\n   * @param {Array<string|Object>} parsedValues The array of parsed values from\n   *     a line of mcf with property label of 'Node'.\n   */\n  setCurNode(parsedValues) {\n    if (parsedValues.length !== 1) {\n      this.errors.push(\n          [this.lineNum, this.line, ERROR_MESSAGES['curNode-length']]);\n      return;\n    }\n\n    let nodeRef;\n    let ns;\n\n    if (parsedValues[0] instanceof Object) {\n      // handle case: Node: dcid:remoteRef, which means that\n      // parsedValues[0] === {'ns':'dcid', 'ref':'remoteRef' }\n      ns = parsedValues[0]['ns'];\n      if (ns === 'dcid') {\n        ns = ns + ':';\n        nodeRef = parsedValues[0]['ref'];\n      } else {\n        this.errors.push(\n            [this.lineNum, this.line, ERROR_MESSAGES['curNode-ns']]);\n        return;\n      }\n    } else{\n      // handle case: Node: localRef, which means parsedValues[0]==='localRef'\n      nodeRef = parsedValues[0];\n      ns = '';\n    }\n    // combine the namespace and reference into single id\n    const nodeId = 'l:' + ns + nodeRef;\n    this.curNode = Node.getNode(nodeId);\n\n    if (ns === 'dcid:') {\n      if(!this.curNode.setDCID(nodeRef)){\n        this.errors.push([this.lineNum, this.line, ERROR_MESSAGES['setDCID']]);\n        return;\n      }\n      ParseMcf.localNodeHash[ns + nodeRef] = this.curNode;\n    } else {\n      ParseMcf.localNodeHash[nodeId] = this.curNode;\n    }\n  }\n\n  /**\n   * Sets the dcid of the curNode variable of the calling ParseMcf object given\n   * the property label of the line being parsed is 'dcid'.\n   * @param {Array<string|Object>} parsedValues The array of parsed values from\n   *     a line of mcf with property label of 'dcid'.\n   */\n  setCurNodeDCID(parsedValues) {\n    if (!this.curNode) {\n      this.errors.push(\n          [this.lineNum, this.line, ERROR_MESSAGES['setDCID-noCur']]);\n      return;\n    }\n    if (parsedValues.length !== 1) {\n      this.errors.push(\n          [this.lineNum, this.line, ERROR_MESSAGES['setDCID-multiple']]);\n      return;\n    }\n    if (typeof parsedValues[0] !== 'string') {\n      this.errors.push(\n          [this.lineNum, this.line, ERROR_MESSAGES['setDCID-ref']]);\n      return;\n    }\n\n    if (!this.curNode.setDCID(parsedValues[0])) {\n      this.errors.push([this.lineNum, this.line, ERROR_MESSAGES['setDCID']]);\n    }\n  }\n\n  /**\n   * Create Assertion objects using curNode variable of calling ParseMcf object\n   * as the source of the triple and the prov variable of the ParseMcf object\n   * as the provenance of the triple.One Assertion object is created for each\n   * parsed value given in the array parsedValues.\n   *\n   * @param {string} propLabel The property label of the triple to be created.\n   * @param {Array<string|Object>} parsedValues The parsed values from a line of\n   *     mcf, used to create the target for each created triple.\n   */\n  createAssertionsFromParsedValues(propLabel, parsedValues) {\n    if (!this.curNode) {\n      this.errors.push(\n          [this.lineNum, this.line, ERROR_MESSAGES['assert-noCur']]);\n      return;\n    }\n    for (const val of parsedValues) {\n      let target = val;\n      if (val instanceof Object) {\n        target = Node.getNode(NAMESPACES[val['ns']] + ':' + val['ref']);\n        if (NAMESPACES[val['ns']] === 'dcid') {\n          if (!target.setDCID(val['ref'])) {\n            this.errors.push(\n                [this.lineNum, this.line, ERROR_MESSAGES['setDCID']]);\n          }\n        }\n      }\n      new Assertion(this.curNode, propLabel, target, this.prov);\n    }\n  }\n\n  /**\n   * Parses a single line of an mcf file. First determines if the line should be\n   * read, then finds the property label, then the property values and creates\n   * an Assertion object based on the triple, given the calling object has a\n   * curNode property that acts as the source  and a prov property that gives\n   * the provenance for the triple.\n   *\n   * @param {string} line The line of mcf to be parsed.\n   */\n  parseLine(line) {\n    line = line.trim();\n\n    if (!shouldReadLine(line)) {\n      return; // not an error\n    }\n\n    if (!line.includes(':')) {\n      this.errors.push(\n          [this.lineNum, this.line, ERROR_MESSAGES['parse-noColon']]);\n      return;\n    }\n\n    const propLabel = line.split(':', 1)[0].trim();\n    const propValues = line.substring(line.indexOf(':') + 1).trim();\n\n    if (!propLabel) {\n      this.errors.push(\n          [this.lineNum, this.line, ERROR_MESSAGES['parse-noLabel']]);\n      return;\n    }\n    if (!propValues) {\n      this.errors.push(\n          [this.lineNum, this.line, ERROR_MESSAGES['parse-noValues']]);\n      return;\n    }\n\n    const parsedValues = this.parsePropValues(propValues);\n\n    switch (propLabel) {\n      case 'Node':\n        this.setCurNode(parsedValues);\n        break;\n\n      case 'dcid':\n        this.setCurNodeDCID(parsedValues);\n        break;\n\n      default:\n        this.createAssertionsFromParsedValues(propLabel, parsedValues);\n    }\n  }\n\n  /**\n   * Parses each line of the given string of an mcf file after setting the prov\n   * property of the calling ParseMcf object.\n   * @param {string} mcf The string representation of an mcf file to parse.\n   * @return {Object} A list of the local node ids and the list of error\n   * messages which should be empty if no mcf syntax errors were found.\n   */\n  parseMcfStr(mcf) {\n    const lines = mcf.split('\\n');\n    this.lineNum = 1;\n\n    lines.forEach((line) => {\n      this.line = line;\n      this.parseLine(line);\n      this.lineNum++;\n    });\n\n    return {\n      localNodes: Object.keys(ParseMcf.localNodeHash),\n      errMsgs: this.errors,\n    };\n  }\n\n  /**\n   * Reads an mcf file into a string, then creates ParseMcf object to parse the\n   * string.\n   * @param {FileObject} file An mcf file from the html file-input element.\n   * @return {Promise} Promise returns the result of parseMcfStr.\n   */\n  static readFile(file) {\n    const fileReader = new FileReader();\n    fileReader.readAsText(file);\n\n    return new Promise((res, rej) => {\n      fileReader.addEventListener('loadend', (result) => {\n        const mcfParser = new ParseMcf(file.name);\n        res(mcfParser.parseMcfStr(fileReader.result));\n      });\n      fileReader.addEventListener('error', rej);\n    });\n  }\n}\n\nParseMcf.localNodeHash = {}; // stores mapping of mcf subject IDs to the Node\n\nexport {ParseMcf};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as csv from 'csvtojson';\nimport {shouldReadLine} from './utils.js';\n\n/**\n * Returns the string following '->' in  a given string. Used for getting csv\n * column name when filling in tmcf with values from csv.\n * Ex:   C:SomeDataset->GeoId would return 'GeoId'\n * @param {string} propValue The string to look for a column name in.\n * @return {string|null} The column name that comes after '->'.\n */\nfunction getArrowId(propValue) {\n  if (propValue.includes('->')) {\n    return propValue.split('->')[1];\n  }\n  return null;\n}\n\n/**\n * Returns a string matching the format E:'DataSet Name'->'Entity #'.\n * @param {string} line The string to look for a match in.\n * @return {string|null} The entity id that matches the specified format.\n */\nfunction getEntityID(line) {\n  const localIdMatch = line.match('E:(.*)->(.*)');\n  if (localIdMatch) {\n    return localIdMatch[0];\n  }\n  return null;\n}\n\n/**\n * Class responsible for converting one TMCF file and one CSV file into an MCF\n * string.\n */\nclass ParseTmcf {\n  /**\n   * Current row number of the csv file that us being parsed.\n   * @type {number}\n   */\n  csvIndex;\n\n  /**\n  * Create a ParseTmcf object which keeps tracks of the current csv row\n  * number being parsed.\n  */\n  constructor() {\n    this.csvIndex = -1;\n  }\n\n  /**\n   * Generates a local id for a node of specfic row in csv from an entity id\n   * used in tmcf file. Ex: E:SomeDataset->E1 => SomeDataset_E1_R<index>\n   * @param {string} entityID The entity id used in tmcf file.\n   * @return {string|null} The local id for the node of the specific csv row.\n   */\n  getLocalIdFromEntityId(entityID) {\n    if (entityID) {\n      return entityID.replace('->', '_').replace('E:', '') + '_R' +\n             this.csvIndex;\n    }\n    return null;\n  }\n\n  /**\n   * Converts propertyValues from a line of tmcf to mcf by either converting\n   * entity ids to local ids or replacing a csv column reference with the actual\n   * value from the csv.\n   *\n   * @param {string} propValues The property values from the line of TMCF.\n   * @param {Object} csvRow The JSON representation of a single row of a csv\n   *     file. The keys are the column names and values are the corresponding\n   *     entries of the csv for the specfic row/column.\n   * @return {string} The mcf version of the given propValues which has local\n   *     ids in lieu of entity ids and csv column references replaces with csv\n   *     values.\n   */\n  fillPropertyValues(propValues, csvRow) {\n    const filledValues = [];\n\n    for (const propValue of propValues.split(',')) {\n      let filledValue;\n\n      const entityID = getEntityID(propValue);\n      const colName = getArrowId(propValue);\n\n      if (entityID) {\n        // convert entity id format to local id format\n        // Ex: E:SomeDataset->E1 => l:SomeDataset_E1_R<index>\n        const localId = 'l:' + this.getLocalIdFromEntityId(entityID);\n        filledValue = propValue.replace(entityID, localId);\n      } else if (colName) {\n        // Replace csv column placeholder with the value\n        filledValue = propValue.replace(/C:(.*)->(.*)/, csvRow[colName]);\n      } else {\n        filledValue = propValue;\n      }\n      filledValues.push(filledValue);\n    }\n    return filledValues.join(',');\n  }\n\n  /**\n   * Convert a single row from the csv file to multiple lines of mcf by filling\n   * in the appropriate values in the tmcf template.\n   * @param {string} template The string representation of tmcf file.\n   * @param {Object} csvRow The JSON representation of a single row of a csv\n   *     file. The keys are the column names and values are the corresponding\n   *     entries of the csv for the specfic row/column.\n   * @return {string} The constructed mcf for the single row from csv file.\n   */\n  fillTemplateFromRow(template, csvRow) {\n    const filledTemplate = [];\n\n    for (const line of template.split('\\n')) {\n      if (!line.trim() || !shouldReadLine(line)) {\n        filledTemplate.push('');\n        continue;\n      }\n\n      const propLabel = line.split(':')[0].trim();\n      const propValues = line.substring(line.indexOf(':') + 1).trim();\n      ;\n\n      if (propLabel === 'Node') {\n        if (propValues.includes(',')) {\n          throw new Error('cannot have multiple ids for Node declaration');\n        }\n        const entityID = getEntityID(propValues);\n        if (entityID) {\n          filledTemplate.push(propLabel + ': ' +\n                              this.getLocalIdFromEntityId(entityID));\n        } else {\n          filledTemplate.push(propLabel + ': ' + propValues);\n        }\n      } else {\n        const filledValues = this.fillPropertyValues(propValues, csvRow);\n        filledTemplate.push(propLabel + ': ' + filledValues);\n      }\n    }\n    return filledTemplate.join('\\n');\n  }\n\n  /**\n   * Creates an mcf string from a string representation of TMCF file and the\n   * json representation of a CSV file. The whole template from the tmcf is\n   * populated with values for each row of the csv.\n   * @param {string} template The string representation of a tmcf file.\n   * @param {Array<Object>} csvRows The json representation of the csv file.\n   *     Each Object element of the array represents one row of the csv.\n   * @return {string} The generated mcf as a string.\n   */\n  csvToMcf(template, csvRows) {\n    this.csvIndex = 1;\n    const mcfLines = [];\n    for (const row of csvRows) {\n      mcfLines.push(this.fillTemplateFromRow(template, row));\n      this.csvIndex += 1;\n    }\n    return mcfLines.join('\\n');\n  }\n\n  /**\n   * Converts CSV file to an array of JS Object where each JS Object in the\n   * array represents one row of the csv. The keys of the object are the column\n   * header names and the values of the object are the csv entries in that\n   * column of the given row the object represents.\n   * @param {string} template The string representation of a tmcf file.\n   * @param {FileObject} csvFile THe csv file from html file-input element.\n   * @return {Array<Object>} The json representation of the csv file.\n   */\n  async readCsvFile(template, csvFile) {\n    const fileReader = new FileReader();\n    fileReader.readAsText(csvFile);\n    return new Promise((res, rej) => {\n      fileReader.addEventListener('loadend', (result) => {\n        csv()\n            .fromString(fileReader.result)\n            .then((csvRows) => {\n              res(this.csvToMcf(template, csvRows));\n            });\n      });\n      fileReader.addEventListener('error', rej);\n    });\n  }\n\n  /**\n   * Reads a tmcf file and returns the contents as a string\n   * @param {FileObject} tmcfFile The tmcf file from html file-input element.\n   * @return {string} The string representation of the tmcf file.\n   */\n  static async readTmcfFile(tmcfFile) {\n    const fileReader = new FileReader();\n    fileReader.readAsText(tmcfFile);\n    return new Promise((res, rej) => {\n      fileReader.addEventListener('loadend',\n          (result) => {\n            res(fileReader.result);\n          });\n      fileReader.addEventListener('error', rej);\n    });\n  }\n\n  /**\n   * Converts a TMCF file and CSV file to an MCF string.\n   * @param {FileObject} tmcfFile The tmcf file from html file-input element.\n   * @param {FileObject} csvFile THe csv file from html file-input element.\n   * @return {string} The translated mcf as a string.\n   */\n  static async generateMcf(tmcfFile, csvFile) {\n    return ParseTmcf.readTmcfFile(tmcfFile).then((template) => {\n      const tmcfParser = new ParseTmcf();\n      return tmcfParser.readCsvFile(template, csvFile);\n    });\n  }\n}\n\nexport {ParseTmcf};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* Functions to relay information from the back-end to the front-end. */\n\nimport {Node} from './graph.js';\nimport {ParseMcf} from './parse-mcf.js';\nimport {ParseTmcf} from './parse-tmcf.js';\n\n/**\n * Parses App state's fileList to find either one mcf file or one set of\n * tmcf+csv. Parses the files according to their file type.\n * @param {Array<FileBlob>} fileList The list of files to load into memory.\n * @return {Object} An object containing the ids of the subject nodes and any\n *     parsiing errorr messagges.\n */\nasync function readFileList(fileList) {\n  let tmcfFile;\n  let csvFile;\n  let mcfFile;\n\n  // parse file list\n  for (const file of fileList) {\n    if (file.name.endsWith('.tmcf')) {\n      tmcfFile = file;\n    } else if (file.name.endsWith('.csv')) {\n      csvFile = file;\n    } else {\n      mcfFile = file;\n    }\n  }\n\n  if (mcfFile) {\n    // read mcf file\n    return ParseMcf.readFile(mcfFile);\n  }\n\n  if (tmcfFile && csvFile) {\n    // generate mcf string, then parse it\n    return ParseTmcf.generateMcf(tmcfFile, csvFile).then((mcf) => {\n      console.log(mcf);\n      const mcfParser = new ParseMcf(tmcfFile.name + '&' + csvFile.name);\n      return mcfParser.parseMcfStr(mcf);\n    });\n  }\n  return {'errMsgs': [], 'localNodes': []};\n}\n\n/**\n  * Clears the backend data. Called when a user presses the 'Clear Files'\n  * button.\n  */\nfunction clearFiles() {\n  Node.nodeHash = {};\n  ParseMcf.localNodeHash = {};\n}\n\n/**\n  * Retreives a node specified by the id. If shouldCreateRemote is true, then\n  * the dcid of the retreieved node will attempt to be set. The\n  * shouldCreateRemote param is true when the user uses the search bar in the UI\n  * so that a node is always found. The node properties will display as blank\n  * and the node id will be colored red if the node does not exist in the KG.\n  *\n  * @param {String} id The id (including namespace) of the node to be retreived.\n  * @param {boolean} shouldCreateRemote Indicates is the dcid of the retreieved\n  *     node should be set to id.\n  * @return {Node} The retreived node with the given id.\n  */\nfunction retrieveNode(id, shouldCreateRemote) {\n  const retrieved = Node.getNode(id);\n  if (shouldCreateRemote) {\n    retrieved.setDCID(id.replace('dcid:', ''));\n  }\n  return retrieved;\n}\n\n/**\n  * Determines if passed in object is a Node object by calling the static Node\n  * class function.\n  *\n  * @param {Object} obj The object to determine if it is of Node type.\n  * @return {boolean} True if obj is of Node type and false otherwise.\n  */\nfunction isNodeObj(obj) {\n  return Node.isNode(obj);\n}\n\n/**\n  * Returns the color that a node should be displayed as in the UI. This String\n  * is used as the jsx element id for the text containing the node id.\n  * Blue = dcid exists in the DC KG\n  * Purple = no dcid, local id is resolved in the local data\n  * Orange = no dcid, local id is unresolved\n  * Red = default, including dcid does not exist in KG\n  *\n  * @param {Node} target The node object whose element color needs to be found.\n  * @return {String} The appropriate display color for the node.\n  */\nasync function getElemId(target) {\n  if (!target) {\n    return null;\n  }\n  if (target.existsInKG) {\n    return 'blue';\n  }\n\n  return target.setExistsInKG().then(() => {\n    if (target.existsInKG) {\n      return 'blue';\n    }\n\n    if (!target.dcid && target.localId &&\n        target.localId in ParseMcf.localNodeHash) {\n      return 'purple';\n    }\n\n    if (!target.dcid && !(target.localId in ParseMcf.localNodeHash)) {\n      return 'orange';\n    }\n    return 'red';\n  });\n}\n\nexport {\n  readFileList,\n  clearFiles,\n  retrieveNode,\n  isNodeObj,\n  getElemId,\n};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\n\nlet fileHash = '#';\n\n/**\n * Sets the window hash value to query a given id.\n * @param {string} id The id of the desired node to display. This can be either\n *     a dcid or a local id.\n */\nfunction goToId(id) {\n  if (id.includes(':')) {\n    window.location.hash = fileHash + '&id=' + id;\n  } else {\n    window.location.hash = fileHash + '&id=dcid:' + id;\n  }\n}\n\n/**\n * Sets the window hash value to query a given id.\n * @param {string} id The id of the desired node to display. This can be either\n *     a dcid or a local id.\n */\nfunction searchId(id) {\n  if (id.includes(':')) {\n    window.location.hash = fileHash + '&search=' + id;\n  } else {\n    window.location.hash = fileHash + '&search=dcid:' + id;\n  }\n}\n\n/**\n * Sets the window hash value to empty to redirect user to home page.\n */\nfunction goToHome() {\n  window.location.hash = fileHash;\n}\n\n/**\n * Saves the file params as part of the current url hash so that the files\n * remain in the url when navigating between nodes.\n * @param {Array<String>} fileUrlList List of file urls to be saved in the hash.\n */\nfunction setFileHash(fileUrlList) {\n  fileHash = '#';\n  for (const fileUrl of fileUrlList) {\n    fileHash += '&file=' + fileUrl;\n  }\n}\n\n/**\n * Opens the given file url.\n * @param {String} fileUrl Url of the fileee to open.\n */\nfunction openFile(fileUrl) {\n  if (fileUrl.startsWith('https')) {\n    window.open(fileUrl);\n  }\n}\n\n// spinning animation to demonstrate loading, used in DisplayNode and Home\nconst LoadingSpinner = (props) => {\n  if (!props.loading) {\n    return null;\n  }\n  return (\n    <div className='centered col'>\n      <br/>\n      <div className='loadingSpinner'></div>\n      <h2>{props.msg}</h2>\n    </div>\n  );\n};\n\n\nexport {goToId, goToHome, setFileHash, openFile, searchId, LoadingSpinner};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {Component} from 'react';\n\nimport * as API from './back-end/server-api.js';\nimport * as utils from './utils.js';\n\nconst NON_BREAKING_SPACE = '\\u00a0';\n\n/* Simple component to render the headers of the triples table. */\nconst TriplesTableHeaderRow = (props) => {\n  if (props.inverse) {\n    return (\n      <tr>\n        <th>Property</th>\n        <th>Source</th>\n        <th>Provenance</th>\n      </tr>\n    );\n  }\n  return (\n    <tr>\n      <th>Property</th>\n      <th>Target</th>\n      <th>Provenance</th>\n    </tr>\n  );\n};\n\n/**\n* Returns an html element containing the styled source if the triple is inverse\n* and the styled target otherwise.\n* @param {Node|string} target The source of an inverse assertion or the target\n*     of a direct assertion.\n* @return {HtmlElement} A single cell of an html row representing a triple.\n*     Either the source or target of the triple depending if the triple is\n*     inverse or not.\n*/\nasync function getTargetCell(target) {\n  if (API.isNodeObj(target)) {\n    const elemId = await API.getElemId(target);\n    return (\n      <p className ='clickable' id={elemId} onClick ={() =>\n        utils.goToId(target.localId || target.dcid)}>{target.getRef()}</p>\n    );\n  }\n  return (<p>{target}</p>);\n}\n\n/**\n* Returns an html element containing the styled provenance of the triple. The\n* provenance if of one of the following formats:\n*     dc/<dcid>\n*     <local mcf file>\n*     <local tmcf file>&<local csv file>\n*     https://<mcf file path>\n*     https://<tmcf path>&https://<csv path>\n*\n* @param {string} prov The provenance of the triple.\n* @return {HtmlElement} A single cell of an html row representing a triple.\n*     Either the source or target of the triple depending if the triple is\n*     inverse or not.\n*/\nfunction getProvenanceCell(prov) {\n  if (prov.startsWith('dc/')) {\n    // data commons provenance id\n    return (<p id='black' className='clickable'onClick={() =>\n      utils.goToId(prov)}>{prov}</p>);\n  }\n\n  if (!prov.startsWith('https')) {\n    // local file(s) as provenance\n    return (<p>{prov.replace('&', ', ')}</p>);\n  }\n\n  if (!prov.includes('&')) {\n    // single mcf file as provenance\n    return (<p className='clickable' onClick={() =>\n      utils.openFile(prov)}>{prov.split('/').pop()}</p>);\n  }\n\n  // provenance is one tmcf and one csv\n\n  const fileNames = [];\n  const provNames = [];\n  for (const fileName of prov.split('&')) {\n    fileNames.push(fileName);\n    provNames.push(fileName.split('/').pop());\n  }\n\n  return (\n    <div>\n      <p className='clickable' onClick={() =>\n        utils.openFile(fileNames[0])}>{provNames[0]}</p>\n      <p>,{NON_BREAKING_SPACE}</p>\n      <p className='clickable' onClick={() =>\n        utils.openFile(fileNames[1])}>{provNames[1]}</p>\n    </div>\n  );\n}\n\n/** Displays all given assertions as a table of triples. */\nexport class TriplesTable extends Component {\n  /** Creates TriplesTable component. */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tableRows: null,\n      loading: true,\n    };\n  }\n\n  /**\n  * Gets rows of triples when the array of Assertions from props is updated.\n  * @param {Object} prevProps The previous props before the component\n  *     updated, used to compare if the passed in triples have been modified.\n  */\n  componentDidUpdate(prevProps) {\n    if (prevProps.triples !== this.props.triples) {\n      this.setState({loading: true});\n      this.getTripleRows().then((rows) => {\n        this.setState({\n          tableRows: rows,\n          loading: false,\n        });\n      });\n    }\n  }\n\n  /**\n  * Converts a list of Assertion objects to an array of HTML row elements that\n  * is displyed in the TriplesTable.\n  *\n  * @return {Array<HtmlElement>} The array of HTML row elements representing\n  *     each triple.\n  */\n  async getTripleRows() {\n    const tripleRows = [];\n    let index = 0; // used to create a unique key for each row element\n\n    for (const assert of this.props.triples) {\n      const missingVal = this.props.inverse ? assert.src : assert.target;\n      const val = await getTargetCell(missingVal);\n\n      const prov = getProvenanceCell(assert.provenance);\n\n      let rowClassName;\n      if (!assert.provenance.startsWith('dc/')) {\n        // triple is not from DC KG, therefore the row should be bold\n        rowClassName = 'bold';\n      }\n\n      tripleRows.push(\n          <tr className={rowClassName} key={index}>\n            <td>{assert.property}</td>\n            <td>{val}</td>\n            <td>{prov}</td>\n          </tr>,\n      );\n      index += 1;\n    }\n    return tripleRows;\n  }\n\n  /** Renders TriplesTable component.   */\n  render() {\n    if (this.state.loading) {\n      // return null when loading to prevent error in rendering Promise objects\n      return null;\n    }\n    return (\n      <table>\n        <thead>\n          <TriplesTableHeaderRow inverse={this.props.inverse}/>\n        </thead>\n        <tbody>\n          {this.state.tableRows}\n        </tbody>\n      </table>\n    );\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {Component} from 'react';\n\nimport * as API from './back-end/server-api.js';\nimport {TriplesTable} from './TriplesTable.js';\nimport {LoadingSpinner} from './utils.js';\n\n/* Simple component to render the colors legend. */\nconst ColorLegend = () => {\n  return (\n    <div>\n      <p className = 'inline'> | </p>\n      <p className='inline' id='blue'>Node has dcid that exists in DC KG</p>\n      <p className = 'inline'> | </p>\n      <p className='inline' id='purple'>Node has resolved local reference and\n        no dcid</p>\n      <p className = 'inline'> | </p>\n      <p className='inline' id='orange'>Node has unresolved local reference and\n        no dcid</p>\n      <p className = 'inline'> | </p>\n      <p className='inline' id='red'>Default; Node has dcid which does not exist\n        in DC KG</p>\n      <p className = 'inline'> | </p>\n    </div>\n  );\n};\n\n/** Displays node data for a given node passed in through props. */\nclass DisplayNode extends Component {\n  /** Creates DisplayNode component. */\n  constructor(props) {\n    super(props);\n    this.state = {\n      ref: null,\n      asserts: [],\n      invAsserts: [],\n      fetching: true,\n    };\n  }\n\n  /** Sets node data when the component mounts. */\n  componentDidMount() {\n    this.setNodeData();\n  }\n\n  /**\n   * Sets node data when the node to display changes.\n   * @param {Object} prevProps The previous props before the component updated,\n   *     used to compare if the passed in node has changed.\n   */\n  componentDidUpdate(prevProps) {\n    if (prevProps.node !== this.props.node) {\n      this.setNodeData();\n    }\n  }\n\n  /**\n   * Loads data to display for the node passed in through props. This includes\n   * fetching the remote data from DC KG for the node.\n   */\n  setNodeData() {\n    console.log(this.props.node);\n\n    const curNode = this.props.node;\n    this.setState({\n      ref: curNode.getRef(),\n      fetching: true,\n      asserts: [],\n      invAsserts: [],\n    });\n\n    API.getElemId(curNode).then((elemId) => this.setState({elemId: elemId}));\n\n    curNode.fetchRemoteData().then(() => {\n      this.setState({\n        asserts: curNode.assertions,\n        invAsserts: curNode.invAssertions,\n        fetching: false,\n      });\n    });\n  }\n\n  /** Renders the DisplayNode component. */\n  render() {\n    return (\n      <div>\n        <ColorLegend />\n        <br/>\n        <h1 className='inline'>Currently Viewing: </h1>\n        <h1 className='inline' id={this.state.elemId}>{this.state.ref}</h1>\n        <br/>\n        <LoadingSpinner loading={this.state.fetching}\n          msg='...fetching triples...'/>\n        <br/>\n        <h3 className='inline padded'>Node Properties</h3>\n        <p className='inline'> - current node is source</p>\n        <br/>\n        <TriplesTable triples={this.state.asserts} inverse={false}/>\n        <br/>\n        <h3 className='inline padded'>Incoming Properties from Other Nodes</h3>\n        <p className='inline'> - current node is target</p>\n        <br/>\n        <TriplesTable triples={this.state.invAsserts} inverse={true}/>\n      </div>\n    );\n  }\n}\nexport {DisplayNode};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {Component} from 'react';\nimport * as utils from './utils.js';\n\nconst UPLOAD_INSTRUCTIONS = `Upload one MCF file or one set of TMCF+CSV files\nto preview in Data Commons. Alternatively, specify a path\nto the file in the url, ex: /build/#&file=<path to tmcf>&file=<path to csv>`;\n\n/** Header component contains the id search bar, upload files, and return home\n  * button.\n  */\nclass Header extends Component {\n  /**\n  * Calls utils method goToId to search for an id when the user presses enter.\n  * @param {Event} event OnKeyUp  event from html search input element.\n  */\n  handleSearch(event) {\n    if (event.keyCode === 13) {\n      utils.searchId(event.target.value);\n    }\n  }\n  /** Renders header element */\n  render() {\n    return (\n      <div className='Header'>\n        <div>\n          {/* return home button*/}\n          <button onClick = {() => utils.goToHome() }>Return Home</button>\n\n          {/* local file selctor*/}\n          <input type=\"file\" title={UPLOAD_INSTRUCTIONS} onChange={(event) => {\n            this.props.upload(Array.from(event.target.files));\n          }}\n          accept=\".mcf,.tmcf,.csv\" required multiple />\n        </div>\n\n        {/* search for id w/dropdown of suggestions of the subject nodes*/}\n        <input type=\"search\" list=\"subjIds\" onKeyUp={this.handleSearch}\n          placeholder=\"Search by id; default namespace is 'dcid:'\"/>\n        <datalist id=\"subjIds\">\n          {this.props.subjIds.map((subjId) => <option value={subjId}\n            key={subjId}/>)}\n        </datalist>\n      </div>\n    );\n  }\n}\nexport {Header};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {Component} from 'react';\nimport {LoadingSpinner, openFile, goToId} from './utils.js';\n\n/* Simple component to render the parsing errors table. */\nconst ParsingErrorsTable = (props) => {\n  if (!props.errsList.length) {\n    return null;\n  }\n  return (\n    <div >\n      <h3 className=\"underline\">Parsing Errors</h3>\n      <table>\n        <thead><tr>\n          <th>Line Num</th>\n          <th>Line</th>\n          <th>Error Message</th>\n        </tr></thead>\n        <tbody>\n          {props.errsList.map((msg) => (\n            <tr key={msg[0]}>\n              <td>{msg[0]}</td>\n              <td>{msg[1]}</td>\n              <td>{msg[2]}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n/** Displays the currently loaded files, clear button, parsing errors, and\n  * subject nodes.\n  */\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"centered col\">\n\n        <h3>Current Files:</h3>\n        {/* list current file names*/}\n        <ul>\n          {this.props.fileList.map((file) =>\n            <li className='clickable' key={file.name} onClick={() =>\n              openFile(file.name)}>{file.name}</li>)}\n        </ul>\n        <br/>\n\n        {/* display clear files button*/}\n        <button onClick={this.props.clear} >Clear</button>\n        <br/>\n        {/* display parsing errors, if any*/}\n        <ParsingErrorsTable errsList={this.props.errs}/>\n\n        <h3>Subject Nodes:</h3>\n        {/* display loading animation while waiting*/}\n        <LoadingSpinner loading={this.props.loading}\n          msg='...loading mcf...'/>\n\n        {/* display list of subject noode ids*/}\n        <ul>\n          {this.props.subjNodes.map((dcid) =>\n            <li className='clickable' key={dcid} onClick={() =>\n              goToId(dcid)}>{dcid}</li>)}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport {Home};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport './index.css';\n\nimport React, {Component} from 'react';\n\nimport {DisplayNode} from './DisplayNode.js';\nimport {Header} from './Header.js';\nimport {Home} from './Home.js';\nimport * as utils from './utils.js';\nimport * as API from './back-end/server-api.js';\n\n\n/* Drives the entire app and holds the state of the files and current node. */\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subjNodes: [],\n      curNode: null,\n      fileList: [],\n      loading: false,\n      firstLoad: true,\n      parsingErrs: [],\n    };\n  }\n\n  /**\n   * Adds an event listener to the window to respond to url hash changes. Calls\n   * the method to parse the url if the mount is the first time loading the app.\n   */\n  componentDidMount() {\n    window.addEventListener('hashchange', () => this.handleHashChange(), false);\n    if (this.state.firstLoad) {\n      this.parseUrl();\n      this.setState({firstLoad: false});\n    }\n  }\n\n  /**\n    * Parses the URL upon the first load of the app. It loads the files that\n    * are specfied or navigates to a node if an id specified by the search\n    * param.\n    */\n  parseUrl() {\n    const params = new URLSearchParams(window.location.hash.split('#')[1]);\n    const fileUrls = params.getAll('file');\n\n    if (fileUrls.length) {\n      this.loadRemoteFiles(0, fileUrls);\n      utils.setFileHash(fileUrls);\n    } else {\n      // get node to display from url\n      const searchId = params.get('search');\n      if (searchId) {\n        const node = API.retrieveNode(searchId, /* shouldCreateRemote */ true);\n        this.setState({curNode: node});\n      }\n    }\n  }\n\n  /**\n  * Sets App state according to url parameters 'id' and 'search'.\n  * The param 'id' is only set when the user clicks to the next node while\n  * navigating the triples tables or the subject nodes list.\n  * The 'search' param is set when the user uses the search bar. This causes\n  * the dcid of the retreived node to try to be set so that a node will always\n  * be displayed when a user seearches for it. If it does not exist in the KG,\n  * then the node id will appear red in the display.\n  */\n  handleHashChange() {\n    let node = null;\n\n    const params = new URLSearchParams(window.location.hash.split('#')[1]);\n    let nodeId = params.get('id');\n\n    if (nodeId) {\n      node = API.retrieveNode(nodeId, /* shouldCreateRemote*/ false);\n    } else {\n      nodeId = params.get('search');\n      if (nodeId) {\n        node = API.retrieveNode(nodeId, /* shouldCreateRemote*/ true);\n      }\n    }\n    this.setState({curNode: node});\n  }\n\n  /**\n  * Gets a remote file from an Array of urls at index i and appends the\n  * retrieved file to App state's fileList. This is a recursive method that\n  * calls itself to iterate through the entire Array of fileUrls.\n  * @param {number} i The index of the url to get from fileUrls array.\n  * @param {Array<string>} fileUrls The array of file urls to load and append\n  *     to App state's fileList.\n  */\n  loadRemoteFiles(i, fileUrls) {\n    if (i >= fileUrls.length) {\n      this.submitFileList();\n      return;\n    }\n\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = 'blob';\n    xhr.open('GET', fileUrls[i]);\n\n    xhr.onload = () => {\n      xhr.response.name = fileUrls[i];\n      this.setState({\n        fileList: this.state.fileList.concat(xhr.response),\n      }, () => this.loadRemoteFiles(i + 1, fileUrls));\n    };\n\n    xhr.send();\n  }\n\n  /**\n  * Passes App state's fileList array to the 'back-end' API to be parsed and\n  * the files loaded into memory.\n  */\n  submitFileList() {\n    this.setState({loading: true});\n\n    API.readFileList(this.state.fileList).then((res) => {\n      this.setState({\n        parsingErrs: res['errMsgs'],\n        subjNodes: res['localNodes'],\n        loading: false,\n      }, () => this.handleHashChange());\n    });\n  }\n\n  /**\n    * Clear App state and calls the 'back-end' API clearFiles method.\n    */\n  onClearPress() {\n    this.setState({\n      subjNodes: [],\n      fileList: [],\n      loading: false,\n      parsingErrs: [],\n    });\n    API.clearFiles();\n    utils.setFileHash('');\n    window.location.hash = '';\n  }\n\n  /**\n    * Save and submit files uploaded from 'Choose File' selector in the Header.\n    */\n  uploadFiles(filesList) {\n    this.setState({\n      curNode: null,\n      fileList: this.state.fileList.concat(filesList),\n    }, () => this.submitFileList());\n  }\n\n  /**\n    * Renders the browser by displaying a specific node or the homepage.\n    */\n  render() {\n    return (\n      <div>\n        <Header upload={(files) => this.uploadFiles(files)}\n          subjIds={this.state.subjNodes}/>\n\n        {this.state.curNode ?\n            // if curNode is set, then display it\n            <DisplayNode node={this.state.curNode} /> :\n            // otherwise display home\n            <Home fileList={this.state.fileList}\n              clear={() => this.onClearPress()}\n              errs={this.state.parsingErrs}\n              loading={this.state.loading}\n              subjNodes={this.state.subjNodes}/>\n        }\n      </div>\n    );\n  }\n}\nexport {App};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {App} from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}