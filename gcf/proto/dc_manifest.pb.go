// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ****************************** IMPORTANT NOTE ******************************
// Note: This file is copied from datacommons/proto/dc_manifest.proto
// Please do not modify this file directly.
// ****************************************************************************

// To generate dc_manifest.pb.go, run the following command from proto folder.
// protoc --proto_path=. --go_out=. --go-grpc_out=. dc_manifest.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.9
// source: dc_manifest.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResolutionInfo_KGType int32

const (
	ResolutionInfo_KG_NONE ResolutionInfo_KGType = 0
	ResolutionInfo_KG_BQ   ResolutionInfo_KGType = 1
	ResolutionInfo_KG_MCF  ResolutionInfo_KGType = 2
)

// Enum value maps for ResolutionInfo_KGType.
var (
	ResolutionInfo_KGType_name = map[int32]string{
		0: "KG_NONE",
		1: "KG_BQ",
		2: "KG_MCF",
	}
	ResolutionInfo_KGType_value = map[string]int32{
		"KG_NONE": 0,
		"KG_BQ":   1,
		"KG_MCF":  2,
	}
)

func (x ResolutionInfo_KGType) Enum() *ResolutionInfo_KGType {
	p := new(ResolutionInfo_KGType)
	*p = x
	return p
}

func (x ResolutionInfo_KGType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolutionInfo_KGType) Descriptor() protoreflect.EnumDescriptor {
	return file_dc_manifest_proto_enumTypes[0].Descriptor()
}

func (ResolutionInfo_KGType) Type() protoreflect.EnumType {
	return &file_dc_manifest_proto_enumTypes[0]
}

func (x ResolutionInfo_KGType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResolutionInfo_KGType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResolutionInfo_KGType(num)
	return nil
}

// Deprecated: Use ResolutionInfo_KGType.Descriptor instead.
func (ResolutionInfo_KGType) EnumDescriptor() ([]byte, []int) {
	return file_dc_manifest_proto_rawDescGZIP(), []int{1, 0}
}

type DataCommonsManifest_ImportCategory int32

const (
	DataCommonsManifest_IMPORT_CATEGORY_UNKNOWN DataCommonsManifest_ImportCategory = 0
	DataCommonsManifest_SCHEMA                  DataCommonsManifest_ImportCategory = 1
	DataCommonsManifest_PLACE                   DataCommonsManifest_ImportCategory = 2
	DataCommonsManifest_CURATED_STATVAR         DataCommonsManifest_ImportCategory = 3
	DataCommonsManifest_GENERATED_STATVAR       DataCommonsManifest_ImportCategory = 4
	DataCommonsManifest_GENERATED_RANKING       DataCommonsManifest_ImportCategory = 5
	DataCommonsManifest_GENERATED_STATVARGROUP  DataCommonsManifest_ImportCategory = 6
	DataCommonsManifest_AGGREGATED_STATS        DataCommonsManifest_ImportCategory = 7
	DataCommonsManifest_STATS                   DataCommonsManifest_ImportCategory = 8
	DataCommonsManifest_ENTITY                  DataCommonsManifest_ImportCategory = 9
	DataCommonsManifest_IMPUTED_STATS           DataCommonsManifest_ImportCategory = 10
	DataCommonsManifest_INTERMEDIATE_STATS      DataCommonsManifest_ImportCategory = 11
)

// Enum value maps for DataCommonsManifest_ImportCategory.
var (
	DataCommonsManifest_ImportCategory_name = map[int32]string{
		0:  "IMPORT_CATEGORY_UNKNOWN",
		1:  "SCHEMA",
		2:  "PLACE",
		3:  "CURATED_STATVAR",
		4:  "GENERATED_STATVAR",
		5:  "GENERATED_RANKING",
		6:  "GENERATED_STATVARGROUP",
		7:  "AGGREGATED_STATS",
		8:  "STATS",
		9:  "ENTITY",
		10: "IMPUTED_STATS",
		11: "INTERMEDIATE_STATS",
	}
	DataCommonsManifest_ImportCategory_value = map[string]int32{
		"IMPORT_CATEGORY_UNKNOWN": 0,
		"SCHEMA":                  1,
		"PLACE":                   2,
		"CURATED_STATVAR":         3,
		"GENERATED_STATVAR":       4,
		"GENERATED_RANKING":       5,
		"GENERATED_STATVARGROUP":  6,
		"AGGREGATED_STATS":        7,
		"STATS":                   8,
		"ENTITY":                  9,
		"IMPUTED_STATS":           10,
		"INTERMEDIATE_STATS":      11,
	}
)

func (x DataCommonsManifest_ImportCategory) Enum() *DataCommonsManifest_ImportCategory {
	p := new(DataCommonsManifest_ImportCategory)
	*p = x
	return p
}

func (x DataCommonsManifest_ImportCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataCommonsManifest_ImportCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_dc_manifest_proto_enumTypes[1].Descriptor()
}

func (DataCommonsManifest_ImportCategory) Type() protoreflect.EnumType {
	return &file_dc_manifest_proto_enumTypes[1]
}

func (x DataCommonsManifest_ImportCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DataCommonsManifest_ImportCategory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DataCommonsManifest_ImportCategory(num)
	return nil
}

// Deprecated: Use DataCommonsManifest_ImportCategory.Descriptor instead.
func (DataCommonsManifest_ImportCategory) EnumDescriptor() ([]byte, []int) {
	return file_dc_manifest_proto_rawDescGZIP(), []int{4, 0}
}

type ExternalTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	TableName      *string         `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	MappingPath    *string         `protobuf:"bytes,2,opt,name=mapping_path,json=mappingPath" json:"mapping_path,omitempty"`
	CsvPath        []string        `protobuf:"bytes,3,rep,name=csv_path,json=csvPath" json:"csv_path,omitempty"`
	ColumnNames    []string        `protobuf:"bytes,4,rep,name=column_names,json=columnNames" json:"column_names,omitempty"`
	FieldDelim     *string         `protobuf:"bytes,5,opt,name=field_delim,json=fieldDelim,def=," json:"field_delim,omitempty"`
	DownloadConfig *DownloadConfig `protobuf:"bytes,6,opt,name=download_config,json=downloadConfig" json:"download_config,omitempty"`
}

// Default values for ExternalTable fields.
const (
	Default_ExternalTable_FieldDelim = string(",")
)

func (x *ExternalTable) Reset() {
	*x = ExternalTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dc_manifest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalTable) ProtoMessage() {}

func (x *ExternalTable) ProtoReflect() protoreflect.Message {
	mi := &file_dc_manifest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalTable.ProtoReflect.Descriptor instead.
func (*ExternalTable) Descriptor() ([]byte, []int) {
	return file_dc_manifest_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Do not use.
func (x *ExternalTable) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *ExternalTable) GetMappingPath() string {
	if x != nil && x.MappingPath != nil {
		return *x.MappingPath
	}
	return ""
}

func (x *ExternalTable) GetCsvPath() []string {
	if x != nil {
		return x.CsvPath
	}
	return nil
}

func (x *ExternalTable) GetColumnNames() []string {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

func (x *ExternalTable) GetFieldDelim() string {
	if x != nil && x.FieldDelim != nil {
		return *x.FieldDelim
	}
	return Default_ExternalTable_FieldDelim
}

func (x *ExternalTable) GetDownloadConfig() *DownloadConfig {
	if x != nil {
		return x.DownloadConfig
	}
	return nil
}

type ResolutionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsesIdResolver           *bool                   `protobuf:"varint,1,opt,name=uses_id_resolver,json=usesIdResolver" json:"uses_id_resolver,omitempty"`
	RequiresIds              []string                `protobuf:"bytes,2,rep,name=requires_ids,json=requiresIds" json:"requires_ids,omitempty"`
	ProvidesIds              []string                `protobuf:"bytes,3,rep,name=provides_ids,json=providesIds" json:"provides_ids,omitempty"`
	NewGeo                   *ResolutionInfo_GeoInfo `protobuf:"bytes,4,opt,name=new_geo,json=newGeo" json:"new_geo,omitempty"`
	KgForResolution          *ResolutionInfo_KGType  `protobuf:"varint,5,opt,name=kg_for_resolution,json=kgForResolution,enum=datacommons.ResolutionInfo_KGType,def=0" json:"kg_for_resolution,omitempty"`
	ResolutionHelperMcfPaths []string                `protobuf:"bytes,6,rep,name=resolution_helper_mcf_paths,json=resolutionHelperMcfPaths" json:"resolution_helper_mcf_paths,omitempty"`
	UnresolvedMcfUrls        []string                `protobuf:"bytes,7,rep,name=unresolved_mcf_urls,json=unresolvedMcfUrls" json:"unresolved_mcf_urls,omitempty"`
}

// Default values for ResolutionInfo fields.
const (
	Default_ResolutionInfo_KgForResolution = ResolutionInfo_KG_NONE
)

func (x *ResolutionInfo) Reset() {
	*x = ResolutionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dc_manifest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionInfo) ProtoMessage() {}

func (x *ResolutionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dc_manifest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionInfo.ProtoReflect.Descriptor instead.
func (*ResolutionInfo) Descriptor() ([]byte, []int) {
	return file_dc_manifest_proto_rawDescGZIP(), []int{1}
}

func (x *ResolutionInfo) GetUsesIdResolver() bool {
	if x != nil && x.UsesIdResolver != nil {
		return *x.UsesIdResolver
	}
	return false
}

func (x *ResolutionInfo) GetRequiresIds() []string {
	if x != nil {
		return x.RequiresIds
	}
	return nil
}

func (x *ResolutionInfo) GetProvidesIds() []string {
	if x != nil {
		return x.ProvidesIds
	}
	return nil
}

func (x *ResolutionInfo) GetNewGeo() *ResolutionInfo_GeoInfo {
	if x != nil {
		return x.NewGeo
	}
	return nil
}

func (x *ResolutionInfo) GetKgForResolution() ResolutionInfo_KGType {
	if x != nil && x.KgForResolution != nil {
		return *x.KgForResolution
	}
	return Default_ResolutionInfo_KgForResolution
}

func (x *ResolutionInfo) GetResolutionHelperMcfPaths() []string {
	if x != nil {
		return x.ResolutionHelperMcfPaths
	}
	return nil
}

func (x *ResolutionInfo) GetUnresolvedMcfUrls() []string {
	if x != nil {
		return x.UnresolvedMcfUrls
	}
	return nil
}

type DownloadConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Prefix:
	//
	//	*DownloadConfig_SrcPrefixDir
	//	*DownloadConfig_SrcLatestVersionFile
	Prefix isDownloadConfig_Prefix `protobuf_oneof:"prefix"`
}

func (x *DownloadConfig) Reset() {
	*x = DownloadConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dc_manifest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadConfig) ProtoMessage() {}

func (x *DownloadConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dc_manifest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadConfig.ProtoReflect.Descriptor instead.
func (*DownloadConfig) Descriptor() ([]byte, []int) {
	return file_dc_manifest_proto_rawDescGZIP(), []int{2}
}

func (m *DownloadConfig) GetPrefix() isDownloadConfig_Prefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (x *DownloadConfig) GetSrcPrefixDir() string {
	if x, ok := x.GetPrefix().(*DownloadConfig_SrcPrefixDir); ok {
		return x.SrcPrefixDir
	}
	return ""
}

func (x *DownloadConfig) GetSrcLatestVersionFile() string {
	if x, ok := x.GetPrefix().(*DownloadConfig_SrcLatestVersionFile); ok {
		return x.SrcLatestVersionFile
	}
	return ""
}

type isDownloadConfig_Prefix interface {
	isDownloadConfig_Prefix()
}

type DownloadConfig_SrcPrefixDir struct {
	SrcPrefixDir string `protobuf:"bytes,1,opt,name=src_prefix_dir,json=srcPrefixDir,oneof"`
}

type DownloadConfig_SrcLatestVersionFile struct {
	SrcLatestVersionFile string `protobuf:"bytes,2,opt,name=src_latest_version_file,json=srcLatestVersionFile,oneof"`
}

func (*DownloadConfig_SrcPrefixDir) isDownloadConfig_Prefix() {}

func (*DownloadConfig_SrcLatestVersionFile) isDownloadConfig_Prefix() {}

type GoldenTripleSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvobsNodesPickOneIn *int32 `protobuf:"varint,3,opt,name=svobs_nodes_pick_one_in,json=svobsNodesPickOneIn,def=20" json:"svobs_nodes_pick_one_in,omitempty"`
}

// Default values for GoldenTripleSelection fields.
const (
	Default_GoldenTripleSelection_SvobsNodesPickOneIn = int32(20)
)

func (x *GoldenTripleSelection) Reset() {
	*x = GoldenTripleSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dc_manifest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoldenTripleSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoldenTripleSelection) ProtoMessage() {}

func (x *GoldenTripleSelection) ProtoReflect() protoreflect.Message {
	mi := &file_dc_manifest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoldenTripleSelection.ProtoReflect.Descriptor instead.
func (*GoldenTripleSelection) Descriptor() ([]byte, []int) {
	return file_dc_manifest_proto_rawDescGZIP(), []int{3}
}

func (x *GoldenTripleSelection) GetSvobsNodesPickOneIn() int32 {
	if x != nil && x.SvobsNodesPickOneIn != nil {
		return *x.SvobsNodesPickOneIn
	}
	return Default_GoldenTripleSelection_SvobsNodesPickOneIn
}

type DataCommonsManifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Import        []*DataCommonsManifest_Import        `protobuf:"bytes,1,rep,name=import" json:"import,omitempty"`
	ImportGroups  []*DataCommonsManifest_ImportGroup   `protobuf:"bytes,2,rep,name=import_groups,json=importGroups" json:"import_groups,omitempty"`
	DatasetSource []*DataCommonsManifest_DatasetSource `protobuf:"bytes,4,rep,name=dataset_source,json=datasetSource" json:"dataset_source,omitempty"`
}

func (x *DataCommonsManifest) Reset() {
	*x = DataCommonsManifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dc_manifest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCommonsManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCommonsManifest) ProtoMessage() {}

func (x *DataCommonsManifest) ProtoReflect() protoreflect.Message {
	mi := &file_dc_manifest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCommonsManifest.ProtoReflect.Descriptor instead.
func (*DataCommonsManifest) Descriptor() ([]byte, []int) {
	return file_dc_manifest_proto_rawDescGZIP(), []int{4}
}

func (x *DataCommonsManifest) GetImport() []*DataCommonsManifest_Import {
	if x != nil {
		return x.Import
	}
	return nil
}

func (x *DataCommonsManifest) GetImportGroups() []*DataCommonsManifest_ImportGroup {
	if x != nil {
		return x.ImportGroups
	}
	return nil
}

func (x *DataCommonsManifest) GetDatasetSource() []*DataCommonsManifest_DatasetSource {
	if x != nil {
		return x.DatasetSource
	}
	return nil
}

type ImportSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImportName *string                    `protobuf:"bytes,1,opt,name=import_name,json=importName" json:"import_name,omitempty"`
	Stat       []*ImportSnapshot_FileStat `protobuf:"bytes,2,rep,name=stat" json:"stat,omitempty"`
}

func (x *ImportSnapshot) Reset() {
	*x = ImportSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dc_manifest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportSnapshot) ProtoMessage() {}

func (x *ImportSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_dc_manifest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportSnapshot.ProtoReflect.Descriptor instead.
func (*ImportSnapshot) Descriptor() ([]byte, []int) {
	return file_dc_manifest_proto_rawDescGZIP(), []int{5}
}

func (x *ImportSnapshot) GetImportName() string {
	if x != nil && x.ImportName != nil {
		return *x.ImportName
	}
	return ""
}

func (x *ImportSnapshot) GetStat() []*ImportSnapshot_FileStat {
	if x != nil {
		return x.Stat
	}
	return nil
}

type ResolutionInfo_GeoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DcidSources []string `protobuf:"bytes,1,rep,name=dcid_sources,json=dcidSources" json:"dcid_sources,omitempty"`
}

func (x *ResolutionInfo_GeoInfo) Reset() {
	*x = ResolutionInfo_GeoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dc_manifest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionInfo_GeoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionInfo_GeoInfo) ProtoMessage() {}

func (x *ResolutionInfo_GeoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dc_manifest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionInfo_GeoInfo.ProtoReflect.Descriptor instead.
func (*ResolutionInfo_GeoInfo) Descriptor() ([]byte, []int) {
	return file_dc_manifest_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ResolutionInfo_GeoInfo) GetDcidSources() []string {
	if x != nil {
		return x.DcidSources
	}
	return nil
}

type DownloadConfig_PathPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcFile *string `protobuf:"bytes,1,opt,name=src_file,json=srcFile" json:"src_file,omitempty"`
	DstFile *string `protobuf:"bytes,2,opt,name=dst_file,json=dstFile" json:"dst_file,omitempty"`
}

func (x *DownloadConfig_PathPair) Reset() {
	*x = DownloadConfig_PathPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dc_manifest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadConfig_PathPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadConfig_PathPair) ProtoMessage() {}

func (x *DownloadConfig_PathPair) ProtoReflect() protoreflect.Message {
	mi := &file_dc_manifest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadConfig_PathPair.ProtoReflect.Descriptor instead.
func (*DownloadConfig_PathPair) Descriptor() ([]byte, []int) {
	return file_dc_manifest_proto_rawDescGZIP(), []int{2, 0}
}

func (x *DownloadConfig_PathPair) GetSrcFile() string {
	if x != nil && x.SrcFile != nil {
		return *x.SrcFile
	}
	return ""
}

func (x *DownloadConfig_PathPair) GetDstFile() string {
	if x != nil && x.DstFile != nil {
		return *x.DstFile
	}
	return ""
}

type DownloadConfig_FileOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Op:
	//
	//	*DownloadConfig_FileOp_Cp
	//	*DownloadConfig_FileOp_Del
	Op isDownloadConfig_FileOp_Op `protobuf_oneof:"op"`
}

func (x *DownloadConfig_FileOp) Reset() {
	*x = DownloadConfig_FileOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dc_manifest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadConfig_FileOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadConfig_FileOp) ProtoMessage() {}

func (x *DownloadConfig_FileOp) ProtoReflect() protoreflect.Message {
	mi := &file_dc_manifest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadConfig_FileOp.ProtoReflect.Descriptor instead.
func (*DownloadConfig_FileOp) Descriptor() ([]byte, []int) {
	return file_dc_manifest_proto_rawDescGZIP(), []int{2, 1}
}

func (m *DownloadConfig_FileOp) GetOp() isDownloadConfig_FileOp_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (x *DownloadConfig_FileOp) GetCp() *DownloadConfig_PathPair {
	if x, ok := x.GetOp().(*DownloadConfig_FileOp_Cp); ok {
		return x.Cp
	}
	return nil
}

func (x *DownloadConfig_FileOp) GetDel() string {
	if x, ok := x.GetOp().(*DownloadConfig_FileOp_Del); ok {
		return x.Del
	}
	return ""
}

type isDownloadConfig_FileOp_Op interface {
	isDownloadConfig_FileOp_Op()
}

type DownloadConfig_FileOp_Cp struct {
	Cp *DownloadConfig_PathPair `protobuf:"bytes,1,opt,name=cp,oneof"`
}

type DownloadConfig_FileOp_Del struct {
	Del string `protobuf:"bytes,2,opt,name=del,oneof"`
}

func (*DownloadConfig_FileOp_Cp) isDownloadConfig_FileOp_Op() {}

func (*DownloadConfig_FileOp_Del) isDownloadConfig_FileOp_Op() {}

type DataCommonsManifest_Import struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImportName               *string                             `protobuf:"bytes,1,opt,name=import_name,json=importName" json:"import_name,omitempty"`
	ProvenanceUrl            *string                             `protobuf:"bytes,2,opt,name=provenance_url,json=provenanceUrl" json:"provenance_url,omitempty"`
	ProvenanceDescription    *string                             `protobuf:"bytes,6,opt,name=provenance_description,json=provenanceDescription" json:"provenance_description,omitempty"`
	Category                 *DataCommonsManifest_ImportCategory `protobuf:"varint,20,opt,name=category,enum=datacommons.DataCommonsManifest_ImportCategory" json:"category,omitempty"`
	ImportGroups             []string                            `protobuf:"bytes,23,rep,name=import_groups,json=importGroups" json:"import_groups,omitempty"`
	McfUrl                   []string                            `protobuf:"bytes,3,rep,name=mcf_url,json=mcfUrl" json:"mcf_url,omitempty"`
	McfProtoUrl              []string                            `protobuf:"bytes,25,rep,name=mcf_proto_url,json=mcfProtoUrl" json:"mcf_proto_url,omitempty"`
	IsMcfReplicatedFromPiper *bool                               `protobuf:"varint,18,opt,name=is_mcf_replicated_from_piper,json=isMcfReplicatedFromPiper" json:"is_mcf_replicated_from_piper,omitempty"`
	Table                    []*ExternalTable                    `protobuf:"bytes,4,rep,name=table" json:"table,omitempty"`
	CuratorEmail             *string                             `protobuf:"bytes,5,opt,name=curator_email,json=curatorEmail,def=imports@datacommons.org" json:"curator_email,omitempty"`
	ResolutionInfo           *ResolutionInfo                     `protobuf:"bytes,9,opt,name=resolution_info,json=resolutionInfo" json:"resolution_info,omitempty"`
	StartDateInKg            *string                             `protobuf:"bytes,10,opt,name=start_date_in_kg,json=startDateInKg" json:"start_date_in_kg,omitempty"`
	EndDateInKg              *string                             `protobuf:"bytes,11,opt,name=end_date_in_kg,json=endDateInKg" json:"end_date_in_kg,omitempty"`
	EndDateInSource          *string                             `protobuf:"bytes,21,opt,name=end_date_in_source,json=endDateInSource" json:"end_date_in_source,omitempty"`
	ReleaseFrequency         *string                             `protobuf:"bytes,12,opt,name=release_frequency,json=releaseFrequency" json:"release_frequency,omitempty"`
	NextReleaseDate          *string                             `protobuf:"bytes,13,opt,name=next_release_date,json=nextReleaseDate" json:"next_release_date,omitempty"`
	DataDownloadUrl          []string                            `protobuf:"bytes,15,rep,name=data_download_url,json=dataDownloadUrl" json:"data_download_url,omitempty"`
	AutomatedMcfGenerationBy *string                             `protobuf:"bytes,24,opt,name=automated_mcf_generation_by,json=automatedMcfGenerationBy" json:"automated_mcf_generation_by,omitempty"`
	GoldenTripleSelection    *GoldenTripleSelection              `protobuf:"bytes,14,opt,name=golden_triple_selection,json=goldenTripleSelection" json:"golden_triple_selection,omitempty"`
	IsUnresolvedMcfMissing   *bool                               `protobuf:"varint,22,opt,name=is_unresolved_mcf_missing,json=isUnresolvedMcfMissing,def=0" json:"is_unresolved_mcf_missing,omitempty"`
	McfDownloadConfig        *DownloadConfig                     `protobuf:"bytes,17,opt,name=mcf_download_config,json=mcfDownloadConfig" json:"mcf_download_config,omitempty"`
	DatasetName              *string                             `protobuf:"bytes,26,opt,name=dataset_name,json=datasetName" json:"dataset_name,omitempty"`
}

// Default values for DataCommonsManifest_Import fields.
const (
	Default_DataCommonsManifest_Import_CuratorEmail           = string("imports@datacommons.org")
	Default_DataCommonsManifest_Import_IsUnresolvedMcfMissing = bool(false)
)

func (x *DataCommonsManifest_Import) Reset() {
	*x = DataCommonsManifest_Import{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dc_manifest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCommonsManifest_Import) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCommonsManifest_Import) ProtoMessage() {}

func (x *DataCommonsManifest_Import) ProtoReflect() protoreflect.Message {
	mi := &file_dc_manifest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCommonsManifest_Import.ProtoReflect.Descriptor instead.
func (*DataCommonsManifest_Import) Descriptor() ([]byte, []int) {
	return file_dc_manifest_proto_rawDescGZIP(), []int{4, 0}
}

func (x *DataCommonsManifest_Import) GetImportName() string {
	if x != nil && x.ImportName != nil {
		return *x.ImportName
	}
	return ""
}

func (x *DataCommonsManifest_Import) GetProvenanceUrl() string {
	if x != nil && x.ProvenanceUrl != nil {
		return *x.ProvenanceUrl
	}
	return ""
}

func (x *DataCommonsManifest_Import) GetProvenanceDescription() string {
	if x != nil && x.ProvenanceDescription != nil {
		return *x.ProvenanceDescription
	}
	return ""
}

func (x *DataCommonsManifest_Import) GetCategory() DataCommonsManifest_ImportCategory {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return DataCommonsManifest_IMPORT_CATEGORY_UNKNOWN
}

func (x *DataCommonsManifest_Import) GetImportGroups() []string {
	if x != nil {
		return x.ImportGroups
	}
	return nil
}

func (x *DataCommonsManifest_Import) GetMcfUrl() []string {
	if x != nil {
		return x.McfUrl
	}
	return nil
}

func (x *DataCommonsManifest_Import) GetMcfProtoUrl() []string {
	if x != nil {
		return x.McfProtoUrl
	}
	return nil
}

func (x *DataCommonsManifest_Import) GetIsMcfReplicatedFromPiper() bool {
	if x != nil && x.IsMcfReplicatedFromPiper != nil {
		return *x.IsMcfReplicatedFromPiper
	}
	return false
}

func (x *DataCommonsManifest_Import) GetTable() []*ExternalTable {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *DataCommonsManifest_Import) GetCuratorEmail() string {
	if x != nil && x.CuratorEmail != nil {
		return *x.CuratorEmail
	}
	return Default_DataCommonsManifest_Import_CuratorEmail
}

func (x *DataCommonsManifest_Import) GetResolutionInfo() *ResolutionInfo {
	if x != nil {
		return x.ResolutionInfo
	}
	return nil
}

func (x *DataCommonsManifest_Import) GetStartDateInKg() string {
	if x != nil && x.StartDateInKg != nil {
		return *x.StartDateInKg
	}
	return ""
}

func (x *DataCommonsManifest_Import) GetEndDateInKg() string {
	if x != nil && x.EndDateInKg != nil {
		return *x.EndDateInKg
	}
	return ""
}

func (x *DataCommonsManifest_Import) GetEndDateInSource() string {
	if x != nil && x.EndDateInSource != nil {
		return *x.EndDateInSource
	}
	return ""
}

func (x *DataCommonsManifest_Import) GetReleaseFrequency() string {
	if x != nil && x.ReleaseFrequency != nil {
		return *x.ReleaseFrequency
	}
	return ""
}

func (x *DataCommonsManifest_Import) GetNextReleaseDate() string {
	if x != nil && x.NextReleaseDate != nil {
		return *x.NextReleaseDate
	}
	return ""
}

func (x *DataCommonsManifest_Import) GetDataDownloadUrl() []string {
	if x != nil {
		return x.DataDownloadUrl
	}
	return nil
}

func (x *DataCommonsManifest_Import) GetAutomatedMcfGenerationBy() string {
	if x != nil && x.AutomatedMcfGenerationBy != nil {
		return *x.AutomatedMcfGenerationBy
	}
	return ""
}

func (x *DataCommonsManifest_Import) GetGoldenTripleSelection() *GoldenTripleSelection {
	if x != nil {
		return x.GoldenTripleSelection
	}
	return nil
}

func (x *DataCommonsManifest_Import) GetIsUnresolvedMcfMissing() bool {
	if x != nil && x.IsUnresolvedMcfMissing != nil {
		return *x.IsUnresolvedMcfMissing
	}
	return Default_DataCommonsManifest_Import_IsUnresolvedMcfMissing
}

func (x *DataCommonsManifest_Import) GetMcfDownloadConfig() *DownloadConfig {
	if x != nil {
		return x.McfDownloadConfig
	}
	return nil
}

func (x *DataCommonsManifest_Import) GetDatasetName() string {
	if x != nil && x.DatasetName != nil {
		return *x.DatasetName
	}
	return ""
}

type DataCommonsManifest_ImportGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	IsCustomDc  *bool   `protobuf:"varint,5,opt,name=is_custom_dc,json=isCustomDc,def=0" json:"is_custom_dc,omitempty"`
}

// Default values for DataCommonsManifest_ImportGroup fields.
const (
	Default_DataCommonsManifest_ImportGroup_IsCustomDc = bool(false)
)

func (x *DataCommonsManifest_ImportGroup) Reset() {
	*x = DataCommonsManifest_ImportGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dc_manifest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCommonsManifest_ImportGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCommonsManifest_ImportGroup) ProtoMessage() {}

func (x *DataCommonsManifest_ImportGroup) ProtoReflect() protoreflect.Message {
	mi := &file_dc_manifest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCommonsManifest_ImportGroup.ProtoReflect.Descriptor instead.
func (*DataCommonsManifest_ImportGroup) Descriptor() ([]byte, []int) {
	return file_dc_manifest_proto_rawDescGZIP(), []int{4, 1}
}

func (x *DataCommonsManifest_ImportGroup) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DataCommonsManifest_ImportGroup) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *DataCommonsManifest_ImportGroup) GetIsCustomDc() bool {
	if x != nil && x.IsCustomDc != nil {
		return *x.IsCustomDc
	}
	return Default_DataCommonsManifest_ImportGroup_IsCustomDc
}

type DataCommonsManifest_DatasetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Url  *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	// Types that are assignable to Description:
	//
	//	*DataCommonsManifest_DatasetInfo_DescriptionMd
	//	*DataCommonsManifest_DatasetInfo_DescriptionFile
	Description isDataCommonsManifest_DatasetInfo_Description `protobuf_oneof:"description"`
	Verticals   []string                                      `protobuf:"bytes,5,rep,name=verticals" json:"verticals,omitempty"`
}

func (x *DataCommonsManifest_DatasetInfo) Reset() {
	*x = DataCommonsManifest_DatasetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dc_manifest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCommonsManifest_DatasetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCommonsManifest_DatasetInfo) ProtoMessage() {}

func (x *DataCommonsManifest_DatasetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dc_manifest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCommonsManifest_DatasetInfo.ProtoReflect.Descriptor instead.
func (*DataCommonsManifest_DatasetInfo) Descriptor() ([]byte, []int) {
	return file_dc_manifest_proto_rawDescGZIP(), []int{4, 2}
}

func (x *DataCommonsManifest_DatasetInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DataCommonsManifest_DatasetInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (m *DataCommonsManifest_DatasetInfo) GetDescription() isDataCommonsManifest_DatasetInfo_Description {
	if m != nil {
		return m.Description
	}
	return nil
}

func (x *DataCommonsManifest_DatasetInfo) GetDescriptionMd() string {
	if x, ok := x.GetDescription().(*DataCommonsManifest_DatasetInfo_DescriptionMd); ok {
		return x.DescriptionMd
	}
	return ""
}

func (x *DataCommonsManifest_DatasetInfo) GetDescriptionFile() string {
	if x, ok := x.GetDescription().(*DataCommonsManifest_DatasetInfo_DescriptionFile); ok {
		return x.DescriptionFile
	}
	return ""
}

func (x *DataCommonsManifest_DatasetInfo) GetVerticals() []string {
	if x != nil {
		return x.Verticals
	}
	return nil
}

type isDataCommonsManifest_DatasetInfo_Description interface {
	isDataCommonsManifest_DatasetInfo_Description()
}

type DataCommonsManifest_DatasetInfo_DescriptionMd struct {
	DescriptionMd string `protobuf:"bytes,3,opt,name=description_md,json=descriptionMd,oneof"`
}

type DataCommonsManifest_DatasetInfo_DescriptionFile struct {
	DescriptionFile string `protobuf:"bytes,4,opt,name=description_file,json=descriptionFile,oneof"`
}

func (*DataCommonsManifest_DatasetInfo_DescriptionMd) isDataCommonsManifest_DatasetInfo_Description() {
}

func (*DataCommonsManifest_DatasetInfo_DescriptionFile) isDataCommonsManifest_DatasetInfo_Description() {
}

type DataCommonsManifest_DatasetSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string                            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Url      *string                            `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	HeaderMd *string                            `protobuf:"bytes,3,opt,name=header_md,json=headerMd" json:"header_md,omitempty"`
	FooterMd *string                            `protobuf:"bytes,4,opt,name=footer_md,json=footerMd" json:"footer_md,omitempty"`
	Datasets []*DataCommonsManifest_DatasetInfo `protobuf:"bytes,5,rep,name=datasets" json:"datasets,omitempty"`
}

func (x *DataCommonsManifest_DatasetSource) Reset() {
	*x = DataCommonsManifest_DatasetSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dc_manifest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCommonsManifest_DatasetSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCommonsManifest_DatasetSource) ProtoMessage() {}

func (x *DataCommonsManifest_DatasetSource) ProtoReflect() protoreflect.Message {
	mi := &file_dc_manifest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCommonsManifest_DatasetSource.ProtoReflect.Descriptor instead.
func (*DataCommonsManifest_DatasetSource) Descriptor() ([]byte, []int) {
	return file_dc_manifest_proto_rawDescGZIP(), []int{4, 3}
}

func (x *DataCommonsManifest_DatasetSource) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DataCommonsManifest_DatasetSource) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *DataCommonsManifest_DatasetSource) GetHeaderMd() string {
	if x != nil && x.HeaderMd != nil {
		return *x.HeaderMd
	}
	return ""
}

func (x *DataCommonsManifest_DatasetSource) GetFooterMd() string {
	if x != nil && x.FooterMd != nil {
		return *x.FooterMd
	}
	return ""
}

func (x *DataCommonsManifest_DatasetSource) GetDatasets() []*DataCommonsManifest_DatasetInfo {
	if x != nil {
		return x.Datasets
	}
	return nil
}

type ImportSnapshot_FileStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      *string  `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Length    *int64   `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	MtimeSecs *float64 `protobuf:"fixed64,3,opt,name=mtime_secs,json=mtimeSecs" json:"mtime_secs,omitempty"`
}

func (x *ImportSnapshot_FileStat) Reset() {
	*x = ImportSnapshot_FileStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dc_manifest_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportSnapshot_FileStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportSnapshot_FileStat) ProtoMessage() {}

func (x *ImportSnapshot_FileStat) ProtoReflect() protoreflect.Message {
	mi := &file_dc_manifest_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportSnapshot_FileStat.ProtoReflect.Descriptor instead.
func (*ImportSnapshot_FileStat) Descriptor() ([]byte, []int) {
	return file_dc_manifest_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ImportSnapshot_FileStat) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *ImportSnapshot_FileStat) GetLength() int64 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *ImportSnapshot_FileStat) GetMtimeSecs() float64 {
	if x != nil && x.MtimeSecs != nil {
		return *x.MtimeSecs
	}
	return 0
}

var File_dc_manifest_proto protoreflect.FileDescriptor

var file_dc_manifest_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x63, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x22, 0xfd, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x73, 0x76, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x73, 0x76, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x01, 0x2c, 0x52, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x12, 0x44, 0x0a, 0x0f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0xe2, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75,
	0x73, 0x65, 0x73, 0x49, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x49, 0x64, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73,
	0x49, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x67, 0x65, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x47, 0x65,
	0x6f, 0x12, 0x57, 0x0a, 0x11, 0x6b, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4b, 0x47, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x07, 0x4b, 0x47, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x0f, 0x6b, 0x67, 0x46, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f,
	0x6d, 0x63, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x18, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x4d, 0x63, 0x66, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x63, 0x66, 0x5f, 0x75, 0x72, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x4d, 0x63, 0x66, 0x55, 0x72, 0x6c, 0x73, 0x1a, 0x2c, 0x0a, 0x07, 0x47, 0x65, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x63, 0x69, 0x64, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x63, 0x69, 0x64,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x2c, 0x0a, 0x06, 0x4b, 0x47, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x47, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x4b, 0x47, 0x5f, 0x42, 0x51, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x47, 0x5f,
	0x4d, 0x43, 0x46, 0x10, 0x02, 0x22, 0xa5, 0x02, 0x0a, 0x0e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x44, 0x69, 0x72,
	0x12, 0x37, 0x0a, 0x17, 0x73, 0x72, 0x63, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x14, 0x73, 0x72, 0x63, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x40, 0x0a, 0x08, 0x50, 0x61, 0x74,
	0x68, 0x50, 0x61, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x5a, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x65, 0x4f, 0x70, 0x12, 0x36, 0x0a, 0x02, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x50, 0x61, 0x69, 0x72, 0x48, 0x00, 0x52, 0x02, 0x63, 0x70, 0x12, 0x12, 0x0a,
	0x03, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x64, 0x65,
	0x6c, 0x42, 0x04, 0x0a, 0x02, 0x6f, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x5d, 0x0a,
	0x15, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x76, 0x6f, 0x62, 0x73, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x32, 0x30, 0x52, 0x13, 0x73, 0x76, 0x6f,
	0x62, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x4f, 0x6e, 0x65, 0x49, 0x6e,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x99, 0x11, 0x0a,
	0x13, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x4d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x51, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x55, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a,
	0xa3, 0x09, 0x0a, 0x06, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x35, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d,
	0x63, 0x66, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x63,
	0x66, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x63, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x63, 0x66,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x6d,
	0x63, 0x66, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x69, 0x73, 0x4d, 0x63, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x3a, 0x17, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x40, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27,
	0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x6b, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x4b, 0x67, 0x12, 0x23, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6b, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x4b, 0x67, 0x12, 0x2b, 0x0a, 0x12,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x3d,
	0x0a, 0x1b, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x63, 0x66, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x63,
	0x66, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x5a, 0x0a,
	0x17, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x6f, 0x6c,
	0x64, 0x65, 0x6e, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x15, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x19, 0x69, 0x73, 0x5f,
	0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x63, 0x66, 0x5f, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x16, 0x69, 0x73, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x4d, 0x63, 0x66, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x13, 0x6d,
	0x63, 0x66, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x6d, 0x63, 0x66, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x07, 0x10,
	0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08,
	0x13, 0x10, 0x14, 0x4a, 0x04, 0x08, 0x1b, 0x10, 0x1c, 0x4a, 0x04, 0x08, 0x1c, 0x10, 0x1d, 0x4a,
	0x04, 0x08, 0x1d, 0x10, 0x1e, 0x1a, 0x78, 0x0a, 0x0b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x63, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x1a,
	0xb6, 0x01, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x64, 0x12, 0x2b,
	0x0a, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb9, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x4d, 0x64, 0x12, 0x48, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4d, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x55, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x56, 0x41, 0x52, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x56, 0x41, 0x52, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x1a,
	0x0a, 0x16, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x56, 0x41, 0x52, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x47,
	0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x10, 0x07,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x54, 0x53, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4d, 0x50, 0x55, 0x54,
	0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53,
	0x10, 0x0b, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04,
	0x73, 0x74, 0x61, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x04, 0x73, 0x74, 0x61, 0x74, 0x1a, 0x55, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x73, 0x42, 0x03, 0x5a,
	0x01, 0x2e,
}

var (
	file_dc_manifest_proto_rawDescOnce sync.Once
	file_dc_manifest_proto_rawDescData = file_dc_manifest_proto_rawDesc
)

func file_dc_manifest_proto_rawDescGZIP() []byte {
	file_dc_manifest_proto_rawDescOnce.Do(func() {
		file_dc_manifest_proto_rawDescData = protoimpl.X.CompressGZIP(file_dc_manifest_proto_rawDescData)
	})
	return file_dc_manifest_proto_rawDescData
}

var file_dc_manifest_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dc_manifest_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_dc_manifest_proto_goTypes = []interface{}{
	(ResolutionInfo_KGType)(0),                // 0: datacommons.ResolutionInfo.KGType
	(DataCommonsManifest_ImportCategory)(0),   // 1: datacommons.DataCommonsManifest.ImportCategory
	(*ExternalTable)(nil),                     // 2: datacommons.ExternalTable
	(*ResolutionInfo)(nil),                    // 3: datacommons.ResolutionInfo
	(*DownloadConfig)(nil),                    // 4: datacommons.DownloadConfig
	(*GoldenTripleSelection)(nil),             // 5: datacommons.GoldenTripleSelection
	(*DataCommonsManifest)(nil),               // 6: datacommons.DataCommonsManifest
	(*ImportSnapshot)(nil),                    // 7: datacommons.ImportSnapshot
	(*ResolutionInfo_GeoInfo)(nil),            // 8: datacommons.ResolutionInfo.GeoInfo
	(*DownloadConfig_PathPair)(nil),           // 9: datacommons.DownloadConfig.PathPair
	(*DownloadConfig_FileOp)(nil),             // 10: datacommons.DownloadConfig.FileOp
	(*DataCommonsManifest_Import)(nil),        // 11: datacommons.DataCommonsManifest.Import
	(*DataCommonsManifest_ImportGroup)(nil),   // 12: datacommons.DataCommonsManifest.ImportGroup
	(*DataCommonsManifest_DatasetInfo)(nil),   // 13: datacommons.DataCommonsManifest.DatasetInfo
	(*DataCommonsManifest_DatasetSource)(nil), // 14: datacommons.DataCommonsManifest.DatasetSource
	(*ImportSnapshot_FileStat)(nil),           // 15: datacommons.ImportSnapshot.FileStat
}
var file_dc_manifest_proto_depIdxs = []int32{
	4,  // 0: datacommons.ExternalTable.download_config:type_name -> datacommons.DownloadConfig
	8,  // 1: datacommons.ResolutionInfo.new_geo:type_name -> datacommons.ResolutionInfo.GeoInfo
	0,  // 2: datacommons.ResolutionInfo.kg_for_resolution:type_name -> datacommons.ResolutionInfo.KGType
	11, // 3: datacommons.DataCommonsManifest.import:type_name -> datacommons.DataCommonsManifest.Import
	12, // 4: datacommons.DataCommonsManifest.import_groups:type_name -> datacommons.DataCommonsManifest.ImportGroup
	14, // 5: datacommons.DataCommonsManifest.dataset_source:type_name -> datacommons.DataCommonsManifest.DatasetSource
	15, // 6: datacommons.ImportSnapshot.stat:type_name -> datacommons.ImportSnapshot.FileStat
	9,  // 7: datacommons.DownloadConfig.FileOp.cp:type_name -> datacommons.DownloadConfig.PathPair
	1,  // 8: datacommons.DataCommonsManifest.Import.category:type_name -> datacommons.DataCommonsManifest.ImportCategory
	2,  // 9: datacommons.DataCommonsManifest.Import.table:type_name -> datacommons.ExternalTable
	3,  // 10: datacommons.DataCommonsManifest.Import.resolution_info:type_name -> datacommons.ResolutionInfo
	5,  // 11: datacommons.DataCommonsManifest.Import.golden_triple_selection:type_name -> datacommons.GoldenTripleSelection
	4,  // 12: datacommons.DataCommonsManifest.Import.mcf_download_config:type_name -> datacommons.DownloadConfig
	13, // 13: datacommons.DataCommonsManifest.DatasetSource.datasets:type_name -> datacommons.DataCommonsManifest.DatasetInfo
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_dc_manifest_proto_init() }
func file_dc_manifest_proto_init() {
	if File_dc_manifest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dc_manifest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dc_manifest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dc_manifest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dc_manifest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoldenTripleSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dc_manifest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCommonsManifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dc_manifest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dc_manifest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionInfo_GeoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dc_manifest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadConfig_PathPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dc_manifest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadConfig_FileOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dc_manifest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCommonsManifest_Import); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dc_manifest_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCommonsManifest_ImportGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dc_manifest_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCommonsManifest_DatasetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dc_manifest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCommonsManifest_DatasetSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dc_manifest_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportSnapshot_FileStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dc_manifest_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*DownloadConfig_SrcPrefixDir)(nil),
		(*DownloadConfig_SrcLatestVersionFile)(nil),
	}
	file_dc_manifest_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*DownloadConfig_FileOp_Cp)(nil),
		(*DownloadConfig_FileOp_Del)(nil),
	}
	file_dc_manifest_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*DataCommonsManifest_DatasetInfo_DescriptionMd)(nil),
		(*DataCommonsManifest_DatasetInfo_DescriptionFile)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dc_manifest_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dc_manifest_proto_goTypes,
		DependencyIndexes: file_dc_manifest_proto_depIdxs,
		EnumInfos:         file_dc_manifest_proto_enumTypes,
		MessageInfos:      file_dc_manifest_proto_msgTypes,
	}.Build()
	File_dc_manifest_proto = out.File
	file_dc_manifest_proto_rawDesc = nil
	file_dc_manifest_proto_goTypes = nil
	file_dc_manifest_proto_depIdxs = nil
}
